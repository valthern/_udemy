// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace EFCorePeliculas.CompiledModels
{
    public partial class ApplicationDbContextModel
    {
        partial void Initialize()
        {
            var actor = ActorEntityType.Create(this);
            var direccion = DireccionEntityType.Create(this);
            var direccion0 = Direccion0EntityType.Create(this);
            var cine = CineEntityType.Create(this);
            var direccion1 = Direccion1EntityType.Create(this);
            var cineDetalle = CineDetalleEntityType.Create(this);
            var cineOferta = CineOfertaEntityType.Create(this);
            var genero = GeneroEntityType.Create(this);
            var log = LogEntityType.Create(this);
            var mensaje = MensajeEntityType.Create(this);
            var pago = PagoEntityType.Create(this);
            var pelicula = PeliculaEntityType.Create(this);
            var peliculaActor = PeliculaActorEntityType.Create(this);
            var persona = PersonaEntityType.Create(this);
            var producto = ProductoEntityType.Create(this);
            var salaDeCine = SalaDeCineEntityType.Create(this);
            var cineSinUbicacion = CineSinUbicacionEntityType.Create(this);
            var peliculaConConteos = PeliculaConConteosEntityType.Create(this);
            var generoPelicula = GeneroPeliculaEntityType.Create(this);
            var peliculaSalaDeCine = PeliculaSalaDeCineEntityType.Create(this);
            var pagoPaypal = PagoPaypalEntityType.Create(this, pago);
            var pagoTarjeta = PagoTarjetaEntityType.Create(this, pago);
            var merchandising = MerchandisingEntityType.Create(this, producto);
            var peliculaAlquilable = PeliculaAlquilableEntityType.Create(this, producto);

            DireccionEntityType.CreateForeignKey1(direccion, actor);
            Direccion0EntityType.CreateForeignKey1(direccion0, actor);
            Direccion1EntityType.CreateForeignKey1(direccion1, cine);
            CineDetalleEntityType.CreateForeignKey1(cineDetalle, cine);
            CineOfertaEntityType.CreateForeignKey1(cineOferta, cine);
            MensajeEntityType.CreateForeignKey1(mensaje, persona);
            MensajeEntityType.CreateForeignKey2(mensaje, persona);
            PeliculaActorEntityType.CreateForeignKey1(peliculaActor, actor);
            PeliculaActorEntityType.CreateForeignKey2(peliculaActor, pelicula);
            SalaDeCineEntityType.CreateForeignKey1(salaDeCine, cine);
            GeneroPeliculaEntityType.CreateForeignKey1(generoPelicula, genero);
            GeneroPeliculaEntityType.CreateForeignKey2(generoPelicula, pelicula);
            PeliculaSalaDeCineEntityType.CreateForeignKey1(peliculaSalaDeCine, pelicula);
            PeliculaSalaDeCineEntityType.CreateForeignKey2(peliculaSalaDeCine, salaDeCine);
            MerchandisingEntityType.CreateForeignKey1(merchandising, producto);
            PeliculaAlquilableEntityType.CreateForeignKey1(peliculaAlquilable, producto);

            GeneroEntityType.CreateSkipNavigation1(genero, pelicula, generoPelicula);
            PeliculaEntityType.CreateSkipNavigation1(pelicula, genero, generoPelicula);
            PeliculaEntityType.CreateSkipNavigation2(pelicula, salaDeCine, peliculaSalaDeCine);
            SalaDeCineEntityType.CreateSkipNavigation1(salaDeCine, pelicula, peliculaSalaDeCine);

            ActorEntityType.CreateAnnotations(actor);
            DireccionEntityType.CreateAnnotations(direccion);
            Direccion0EntityType.CreateAnnotations(direccion0);
            CineEntityType.CreateAnnotations(cine);
            Direccion1EntityType.CreateAnnotations(direccion1);
            CineDetalleEntityType.CreateAnnotations(cineDetalle);
            CineOfertaEntityType.CreateAnnotations(cineOferta);
            GeneroEntityType.CreateAnnotations(genero);
            LogEntityType.CreateAnnotations(log);
            MensajeEntityType.CreateAnnotations(mensaje);
            PagoEntityType.CreateAnnotations(pago);
            PeliculaEntityType.CreateAnnotations(pelicula);
            PeliculaActorEntityType.CreateAnnotations(peliculaActor);
            PersonaEntityType.CreateAnnotations(persona);
            ProductoEntityType.CreateAnnotations(producto);
            SalaDeCineEntityType.CreateAnnotations(salaDeCine);
            CineSinUbicacionEntityType.CreateAnnotations(cineSinUbicacion);
            PeliculaConConteosEntityType.CreateAnnotations(peliculaConConteos);
            GeneroPeliculaEntityType.CreateAnnotations(generoPelicula);
            PeliculaSalaDeCineEntityType.CreateAnnotations(peliculaSalaDeCine);
            PagoPaypalEntityType.CreateAnnotations(pagoPaypal);
            PagoTarjetaEntityType.CreateAnnotations(pagoTarjeta);
            MerchandisingEntityType.CreateAnnotations(merchandising);
            PeliculaAlquilableEntityType.CreateAnnotations(peliculaAlquilable);

            AddAnnotation("ProductVersion", "8.0.10");
            AddAnnotation("Relational:MaxIdentifierLength", 128);
            AddAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var actor = FindEntityType("EFCorePeliculas.Entidades.Actor")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            actor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var eFCorePeliculasEntidadesActorTableBase = new TableBase("EFCorePeliculas.Entidades.Actor", null, relationalModel);
            var biografiaColumnBase = new ColumnBase<ColumnMappingBase>("Biografia", "nvarchar(max)", eFCorePeliculasEntidadesActorTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorTableBase.Columns.Add("Biografia", biografiaColumnBase);
            var fechaNacimientoColumnBase = new ColumnBase<ColumnMappingBase>("FechaNacimiento", "date", eFCorePeliculasEntidadesActorTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorTableBase.Columns.Add("FechaNacimiento", fechaNacimientoColumnBase);
            var fotoURLColumnBase = new ColumnBase<ColumnMappingBase>("FotoURL", "varchar(500)", eFCorePeliculasEntidadesActorTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorTableBase.Columns.Add("FotoURL", fotoURLColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesActorTableBase);
            eFCorePeliculasEntidadesActorTableBase.Columns.Add("Id", idColumnBase);
            var nombreColumnBase = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(150)", eFCorePeliculasEntidadesActorTableBase);
            eFCorePeliculasEntidadesActorTableBase.Columns.Add("Nombre", nombreColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Actor", eFCorePeliculasEntidadesActorTableBase);
            var eFCorePeliculasEntidadesActorMappingBase = new TableMappingBase<ColumnMappingBase>(actor, eFCorePeliculasEntidadesActorTableBase, true);
            eFCorePeliculasEntidadesActorTableBase.AddTypeMapping(eFCorePeliculasEntidadesActorMappingBase, false);
            defaultTableMappings.Add(eFCorePeliculasEntidadesActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, actor.FindProperty("Id")!, eFCorePeliculasEntidadesActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)biografiaColumnBase, actor.FindProperty("Biografia")!, eFCorePeliculasEntidadesActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaNacimientoColumnBase, actor.FindProperty("FechaNacimiento")!, eFCorePeliculasEntidadesActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fotoURLColumnBase, actor.FindProperty("FotoURL")!, eFCorePeliculasEntidadesActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase, actor.FindProperty("Nombre")!, eFCorePeliculasEntidadesActorMappingBase);

            var tableMappings = new List<TableMapping>();
            actor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var actoresTable = new Table("Actores", null, relationalModel);
            var idColumn = new Column("Id", "int", actoresTable);
            actoresTable.Columns.Add("Id", idColumn);
            var billingAddress_CalleColumn = new Column("BillingAddress_Calle", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("BillingAddress_Calle", billingAddress_CalleColumn);
            var billingAddress_PaisColumn = new Column("BillingAddress_Pais", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("BillingAddress_Pais", billingAddress_PaisColumn);
            var billingAddress_ProvinciaColumn = new Column("BillingAddress_Provincia", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("BillingAddress_Provincia", billingAddress_ProvinciaColumn);
            var biografiaColumn = new Column("Biografia", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("Biografia", biografiaColumn);
            var calleColumn = new Column("Calle", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("Calle", calleColumn);
            var fechaNacimientoColumn = new Column("FechaNacimiento", "date", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("FechaNacimiento", fechaNacimientoColumn);
            var fotoURLColumn = new Column("FotoURL", "varchar(500)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("FotoURL", fotoURLColumn);
            var nombreColumn = new Column("Nombre", "nvarchar(150)", actoresTable);
            actoresTable.Columns.Add("Nombre", nombreColumn);
            var paisColumn = new Column("Pais", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("Pais", paisColumn);
            var provinciaColumn = new Column("Provincia", "nvarchar(max)", actoresTable)
            {
                IsNullable = true
            };
            actoresTable.Columns.Add("Provincia", provinciaColumn);
            var pK_Actores = new UniqueConstraint("PK_Actores", actoresTable, new[] { idColumn });
            actoresTable.PrimaryKey = pK_Actores;
            var pK_ActoresUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Actor.BillingAddress#Direccion",
                new[] { "ActorId" });
            pK_Actores.MappedKeys.Add(pK_ActoresUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ActoresUc).Add(pK_Actores);
            var pK_ActoresUc0 = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Actor.DireccionHogar#Direccion",
                new[] { "ActorId" });
            pK_Actores.MappedKeys.Add(pK_ActoresUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ActoresUc0).Add(pK_Actores);
            var pK_ActoresUc1 = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Actor",
                new[] { "Id" });
            pK_Actores.MappedKeys.Add(pK_ActoresUc1);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ActoresUc1).Add(pK_Actores);
            actoresTable.UniqueConstraints.Add("PK_Actores", pK_Actores);
            relationalModel.Tables.Add(("Actores", null), actoresTable);
            var actoresTableMapping = new TableMapping(actor, actoresTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            actoresTable.AddTypeMapping(actoresTableMapping, false);
            tableMappings.Add(actoresTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, actor.FindProperty("Id")!, actoresTableMapping);
            RelationalModel.CreateColumnMapping(biografiaColumn, actor.FindProperty("Biografia")!, actoresTableMapping);
            RelationalModel.CreateColumnMapping(fechaNacimientoColumn, actor.FindProperty("FechaNacimiento")!, actoresTableMapping);
            RelationalModel.CreateColumnMapping(fotoURLColumn, actor.FindProperty("FotoURL")!, actoresTableMapping);
            RelationalModel.CreateColumnMapping(nombreColumn, actor.FindProperty("Nombre")!, actoresTableMapping);

            var direccion = FindEntityType("EFCorePeliculas.Entidades.Actor.BillingAddress#Direccion")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            direccion.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase = new TableBase("EFCorePeliculas.Entidades.Actor.BillingAddress#Direccion", null, relationalModel);
            var actorIdColumnBase = new ColumnBase<ColumnMappingBase>("ActorId", "int", eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase);
            eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase.Columns.Add("ActorId", actorIdColumnBase);
            var calleColumnBase = new ColumnBase<ColumnMappingBase>("Calle", "nvarchar(max)", eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase.Columns.Add("Calle", calleColumnBase);
            var paisColumnBase = new ColumnBase<ColumnMappingBase>("Pais", "nvarchar(max)", eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase);
            eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase.Columns.Add("Pais", paisColumnBase);
            var provinciaColumnBase = new ColumnBase<ColumnMappingBase>("Provincia", "nvarchar(max)", eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase.Columns.Add("Provincia", provinciaColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Actor.BillingAddress#Direccion", eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase);
            var eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase = new TableMappingBase<ColumnMappingBase>(direccion, eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase, true);
            eFCorePeliculasEntidadesActorBillingAddressDireccionTableBase.AddTypeMapping(eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase, false);
            defaultTableMappings0.Add(eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actorIdColumnBase, direccion.FindProperty("ActorId")!, eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)calleColumnBase, direccion.FindProperty("Calle")!, eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paisColumnBase, direccion.FindProperty("Pais")!, eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provinciaColumnBase, direccion.FindProperty("Provincia")!, eFCorePeliculasEntidadesActorBillingAddressDireccionMappingBase);

            var tableMappings0 = new List<TableMapping>();
            direccion.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var actoresTableMapping0 = new TableMapping(direccion, actoresTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            actoresTable.AddTypeMapping(actoresTableMapping0, true);
            tableMappings0.Add(actoresTableMapping0);
            actoresTable.AddRowInternalForeignKey(direccion, RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Actor.BillingAddress#Direccion",
                new[] { "ActorId" },
                "EFCorePeliculas.Entidades.Actor",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn, direccion.FindProperty("ActorId")!, actoresTableMapping0);
            RelationalModel.CreateColumnMapping(billingAddress_CalleColumn, direccion.FindProperty("Calle")!, actoresTableMapping0);
            RelationalModel.CreateColumnMapping(billingAddress_PaisColumn, direccion.FindProperty("Pais")!, actoresTableMapping0);
            RelationalModel.CreateColumnMapping(billingAddress_ProvinciaColumn, direccion.FindProperty("Provincia")!, actoresTableMapping0);

            var direccion0 = FindEntityType("EFCorePeliculas.Entidades.Actor.DireccionHogar#Direccion")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            direccion0.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase = new TableBase("EFCorePeliculas.Entidades.Actor.DireccionHogar#Direccion", null, relationalModel);
            var actorIdColumnBase0 = new ColumnBase<ColumnMappingBase>("ActorId", "int", eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase);
            eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase.Columns.Add("ActorId", actorIdColumnBase0);
            var calleColumnBase0 = new ColumnBase<ColumnMappingBase>("Calle", "nvarchar(max)", eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase.Columns.Add("Calle", calleColumnBase0);
            var paisColumnBase0 = new ColumnBase<ColumnMappingBase>("Pais", "nvarchar(max)", eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase);
            eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase.Columns.Add("Pais", paisColumnBase0);
            var provinciaColumnBase0 = new ColumnBase<ColumnMappingBase>("Provincia", "nvarchar(max)", eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase.Columns.Add("Provincia", provinciaColumnBase0);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Actor.DireccionHogar#Direccion", eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase);
            var eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase = new TableMappingBase<ColumnMappingBase>(direccion0, eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase, true);
            eFCorePeliculasEntidadesActorDireccionHogarDireccionTableBase.AddTypeMapping(eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase, false);
            defaultTableMappings1.Add(eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actorIdColumnBase0, direccion0.FindProperty("ActorId")!, eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)calleColumnBase0, direccion0.FindProperty("Calle")!, eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paisColumnBase0, direccion0.FindProperty("Pais")!, eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provinciaColumnBase0, direccion0.FindProperty("Provincia")!, eFCorePeliculasEntidadesActorDireccionHogarDireccionMappingBase);

            var tableMappings1 = new List<TableMapping>();
            direccion0.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var actoresTableMapping1 = new TableMapping(direccion0, actoresTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            actoresTable.AddTypeMapping(actoresTableMapping1, true);
            tableMappings1.Add(actoresTableMapping1);
            actoresTable.AddRowInternalForeignKey(direccion0, RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Actor.DireccionHogar#Direccion",
                new[] { "ActorId" },
                "EFCorePeliculas.Entidades.Actor",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn, direccion0.FindProperty("ActorId")!, actoresTableMapping1);
            RelationalModel.CreateColumnMapping(calleColumn, direccion0.FindProperty("Calle")!, actoresTableMapping1);
            RelationalModel.CreateColumnMapping(paisColumn, direccion0.FindProperty("Pais")!, actoresTableMapping1);
            RelationalModel.CreateColumnMapping(provinciaColumn, direccion0.FindProperty("Provincia")!, actoresTableMapping1);

            var cine = FindEntityType("EFCorePeliculas.Entidades.Cine")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            cine.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var eFCorePeliculasEntidadesCineTableBase = new TableBase("EFCorePeliculas.Entidades.Cine", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesCineTableBase);
            eFCorePeliculasEntidadesCineTableBase.Columns.Add("Id", idColumnBase0);
            var nombreColumnBase0 = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(150)", eFCorePeliculasEntidadesCineTableBase);
            eFCorePeliculasEntidadesCineTableBase.Columns.Add("Nombre", nombreColumnBase0);
            var ubicacionColumnBase = new ColumnBase<ColumnMappingBase>("Ubicacion", "geography", eFCorePeliculasEntidadesCineTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineTableBase.Columns.Add("Ubicacion", ubicacionColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Cine", eFCorePeliculasEntidadesCineTableBase);
            var eFCorePeliculasEntidadesCineMappingBase = new TableMappingBase<ColumnMappingBase>(cine, eFCorePeliculasEntidadesCineTableBase, true);
            eFCorePeliculasEntidadesCineTableBase.AddTypeMapping(eFCorePeliculasEntidadesCineMappingBase, false);
            defaultTableMappings2.Add(eFCorePeliculasEntidadesCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, cine.FindProperty("Id")!, eFCorePeliculasEntidadesCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase0, cine.FindProperty("Nombre")!, eFCorePeliculasEntidadesCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ubicacionColumnBase, cine.FindProperty("Ubicacion")!, eFCorePeliculasEntidadesCineMappingBase);

            var tableMappings2 = new List<TableMapping>();
            cine.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var cinesTable = new Table("Cines", null, relationalModel);
            var idColumn0 = new Column("Id", "int", cinesTable);
            cinesTable.Columns.Add("Id", idColumn0);
            var calleColumn0 = new Column("Calle", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Calle", calleColumn0);
            var codigoDeEticaColumn = new Column("CodigoDeEtica", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("CodigoDeEtica", codigoDeEticaColumn);
            var historiaColumn = new Column("Historia", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Historia", historiaColumn);
            var misionesColumn = new Column("Misiones", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Misiones", misionesColumn);
            var nombreColumn0 = new Column("Nombre", "nvarchar(150)", cinesTable);
            cinesTable.Columns.Add("Nombre", nombreColumn0);
            var paisColumn0 = new Column("Pais", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Pais", paisColumn0);
            var provinciaColumn0 = new Column("Provincia", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Provincia", provinciaColumn0);
            var ubicacionColumn = new Column("Ubicacion", "geography", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Ubicacion", ubicacionColumn);
            var valoresColumn = new Column("Valores", "nvarchar(max)", cinesTable)
            {
                IsNullable = true
            };
            cinesTable.Columns.Add("Valores", valoresColumn);
            var pK_Cines = new UniqueConstraint("PK_Cines", cinesTable, new[] { idColumn0 });
            cinesTable.PrimaryKey = pK_Cines;
            var pK_CinesUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Cine.Direccion#Direccion",
                new[] { "CineId" });
            pK_Cines.MappedKeys.Add(pK_CinesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CinesUc).Add(pK_Cines);
            var pK_CinesUc0 = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Cine",
                new[] { "Id" });
            pK_Cines.MappedKeys.Add(pK_CinesUc0);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CinesUc0).Add(pK_Cines);
            var pK_CinesUc1 = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.CineDetalle",
                new[] { "Id" });
            pK_Cines.MappedKeys.Add(pK_CinesUc1);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CinesUc1).Add(pK_Cines);
            cinesTable.UniqueConstraints.Add("PK_Cines", pK_Cines);
            relationalModel.Tables.Add(("Cines", null), cinesTable);
            var cinesTableMapping = new TableMapping(cine, cinesTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            cinesTable.AddTypeMapping(cinesTableMapping, false);
            tableMappings2.Add(cinesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, cine.FindProperty("Id")!, cinesTableMapping);
            RelationalModel.CreateColumnMapping(nombreColumn0, cine.FindProperty("Nombre")!, cinesTableMapping);
            RelationalModel.CreateColumnMapping(ubicacionColumn, cine.FindProperty("Ubicacion")!, cinesTableMapping);

            var direccion1 = FindEntityType("EFCorePeliculas.Entidades.Cine.Direccion#Direccion")!;

            var defaultTableMappings3 = new List<TableMappingBase<ColumnMappingBase>>();
            direccion1.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings3);
            var eFCorePeliculasEntidadesCineDireccionDireccionTableBase = new TableBase("EFCorePeliculas.Entidades.Cine.Direccion#Direccion", null, relationalModel);
            var calleColumnBase1 = new ColumnBase<ColumnMappingBase>("Calle", "nvarchar(max)", eFCorePeliculasEntidadesCineDireccionDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineDireccionDireccionTableBase.Columns.Add("Calle", calleColumnBase1);
            var cineIdColumnBase = new ColumnBase<ColumnMappingBase>("CineId", "int", eFCorePeliculasEntidadesCineDireccionDireccionTableBase);
            eFCorePeliculasEntidadesCineDireccionDireccionTableBase.Columns.Add("CineId", cineIdColumnBase);
            var paisColumnBase1 = new ColumnBase<ColumnMappingBase>("Pais", "nvarchar(max)", eFCorePeliculasEntidadesCineDireccionDireccionTableBase);
            eFCorePeliculasEntidadesCineDireccionDireccionTableBase.Columns.Add("Pais", paisColumnBase1);
            var provinciaColumnBase1 = new ColumnBase<ColumnMappingBase>("Provincia", "nvarchar(max)", eFCorePeliculasEntidadesCineDireccionDireccionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineDireccionDireccionTableBase.Columns.Add("Provincia", provinciaColumnBase1);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Cine.Direccion#Direccion", eFCorePeliculasEntidadesCineDireccionDireccionTableBase);
            var eFCorePeliculasEntidadesCineDireccionDireccionMappingBase = new TableMappingBase<ColumnMappingBase>(direccion1, eFCorePeliculasEntidadesCineDireccionDireccionTableBase, true);
            eFCorePeliculasEntidadesCineDireccionDireccionTableBase.AddTypeMapping(eFCorePeliculasEntidadesCineDireccionDireccionMappingBase, false);
            defaultTableMappings3.Add(eFCorePeliculasEntidadesCineDireccionDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cineIdColumnBase, direccion1.FindProperty("CineId")!, eFCorePeliculasEntidadesCineDireccionDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)calleColumnBase1, direccion1.FindProperty("Calle")!, eFCorePeliculasEntidadesCineDireccionDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)paisColumnBase1, direccion1.FindProperty("Pais")!, eFCorePeliculasEntidadesCineDireccionDireccionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)provinciaColumnBase1, direccion1.FindProperty("Provincia")!, eFCorePeliculasEntidadesCineDireccionDireccionMappingBase);

            var tableMappings3 = new List<TableMapping>();
            direccion1.SetRuntimeAnnotation("Relational:TableMappings", tableMappings3);
            var cinesTableMapping0 = new TableMapping(direccion1, cinesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            cinesTable.AddTypeMapping(cinesTableMapping0, true);
            tableMappings3.Add(cinesTableMapping0);
            cinesTable.AddRowInternalForeignKey(direccion1, RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Cine.Direccion#Direccion",
                new[] { "CineId" },
                "EFCorePeliculas.Entidades.Cine",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn0, direccion1.FindProperty("CineId")!, cinesTableMapping0);
            RelationalModel.CreateColumnMapping(calleColumn0, direccion1.FindProperty("Calle")!, cinesTableMapping0);
            RelationalModel.CreateColumnMapping(paisColumn0, direccion1.FindProperty("Pais")!, cinesTableMapping0);
            RelationalModel.CreateColumnMapping(provinciaColumn0, direccion1.FindProperty("Provincia")!, cinesTableMapping0);

            var cineDetalle = FindEntityType("EFCorePeliculas.Entidades.CineDetalle")!;

            var defaultTableMappings4 = new List<TableMappingBase<ColumnMappingBase>>();
            cineDetalle.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings4);
            var eFCorePeliculasEntidadesCineDetalleTableBase = new TableBase("EFCorePeliculas.Entidades.CineDetalle", null, relationalModel);
            var codigoDeEticaColumnBase = new ColumnBase<ColumnMappingBase>("CodigoDeEtica", "nvarchar(max)", eFCorePeliculasEntidadesCineDetalleTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineDetalleTableBase.Columns.Add("CodigoDeEtica", codigoDeEticaColumnBase);
            var historiaColumnBase = new ColumnBase<ColumnMappingBase>("Historia", "nvarchar(max)", eFCorePeliculasEntidadesCineDetalleTableBase);
            eFCorePeliculasEntidadesCineDetalleTableBase.Columns.Add("Historia", historiaColumnBase);
            var idColumnBase1 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesCineDetalleTableBase);
            eFCorePeliculasEntidadesCineDetalleTableBase.Columns.Add("Id", idColumnBase1);
            var misionesColumnBase = new ColumnBase<ColumnMappingBase>("Misiones", "nvarchar(max)", eFCorePeliculasEntidadesCineDetalleTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineDetalleTableBase.Columns.Add("Misiones", misionesColumnBase);
            var valoresColumnBase = new ColumnBase<ColumnMappingBase>("Valores", "nvarchar(max)", eFCorePeliculasEntidadesCineDetalleTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineDetalleTableBase.Columns.Add("Valores", valoresColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.CineDetalle", eFCorePeliculasEntidadesCineDetalleTableBase);
            var eFCorePeliculasEntidadesCineDetalleMappingBase = new TableMappingBase<ColumnMappingBase>(cineDetalle, eFCorePeliculasEntidadesCineDetalleTableBase, true);
            eFCorePeliculasEntidadesCineDetalleTableBase.AddTypeMapping(eFCorePeliculasEntidadesCineDetalleMappingBase, false);
            defaultTableMappings4.Add(eFCorePeliculasEntidadesCineDetalleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase1, cineDetalle.FindProperty("Id")!, eFCorePeliculasEntidadesCineDetalleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codigoDeEticaColumnBase, cineDetalle.FindProperty("CodigoDeEtica")!, eFCorePeliculasEntidadesCineDetalleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)historiaColumnBase, cineDetalle.FindProperty("Historia")!, eFCorePeliculasEntidadesCineDetalleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)misionesColumnBase, cineDetalle.FindProperty("Misiones")!, eFCorePeliculasEntidadesCineDetalleMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)valoresColumnBase, cineDetalle.FindProperty("Valores")!, eFCorePeliculasEntidadesCineDetalleMappingBase);

            var tableMappings4 = new List<TableMapping>();
            cineDetalle.SetRuntimeAnnotation("Relational:TableMappings", tableMappings4);
            var cinesTableMapping1 = new TableMapping(cineDetalle, cinesTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            cinesTable.AddTypeMapping(cinesTableMapping1, true);
            tableMappings4.Add(cinesTableMapping1);
            cinesTable.AddRowInternalForeignKey(cineDetalle, RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.CineDetalle",
                new[] { "Id" },
                "EFCorePeliculas.Entidades.Cine",
                new[] { "Id" }));
            RelationalModel.CreateColumnMapping(idColumn0, cineDetalle.FindProperty("Id")!, cinesTableMapping1);
            RelationalModel.CreateColumnMapping(codigoDeEticaColumn, cineDetalle.FindProperty("CodigoDeEtica")!, cinesTableMapping1);
            RelationalModel.CreateColumnMapping(historiaColumn, cineDetalle.FindProperty("Historia")!, cinesTableMapping1);
            RelationalModel.CreateColumnMapping(misionesColumn, cineDetalle.FindProperty("Misiones")!, cinesTableMapping1);
            RelationalModel.CreateColumnMapping(valoresColumn, cineDetalle.FindProperty("Valores")!, cinesTableMapping1);

            var cineOferta = FindEntityType("EFCorePeliculas.Entidades.CineOferta")!;

            var defaultTableMappings5 = new List<TableMappingBase<ColumnMappingBase>>();
            cineOferta.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings5);
            var eFCorePeliculasEntidadesCineOfertaTableBase = new TableBase("EFCorePeliculas.Entidades.CineOferta", null, relationalModel);
            var cineIdColumnBase0 = new ColumnBase<ColumnMappingBase>("CineId", "int", eFCorePeliculasEntidadesCineOfertaTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesCineOfertaTableBase.Columns.Add("CineId", cineIdColumnBase0);
            var fechaFinColumnBase = new ColumnBase<ColumnMappingBase>("FechaFin", "date", eFCorePeliculasEntidadesCineOfertaTableBase);
            eFCorePeliculasEntidadesCineOfertaTableBase.Columns.Add("FechaFin", fechaFinColumnBase);
            var fechaInicioColumnBase = new ColumnBase<ColumnMappingBase>("FechaInicio", "date", eFCorePeliculasEntidadesCineOfertaTableBase);
            eFCorePeliculasEntidadesCineOfertaTableBase.Columns.Add("FechaInicio", fechaInicioColumnBase);
            var idColumnBase2 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesCineOfertaTableBase);
            eFCorePeliculasEntidadesCineOfertaTableBase.Columns.Add("Id", idColumnBase2);
            var porcentajeDescuentoColumnBase = new ColumnBase<ColumnMappingBase>("PorcentajeDescuento", "decimal(5,2)", eFCorePeliculasEntidadesCineOfertaTableBase);
            eFCorePeliculasEntidadesCineOfertaTableBase.Columns.Add("PorcentajeDescuento", porcentajeDescuentoColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.CineOferta", eFCorePeliculasEntidadesCineOfertaTableBase);
            var eFCorePeliculasEntidadesCineOfertaMappingBase = new TableMappingBase<ColumnMappingBase>(cineOferta, eFCorePeliculasEntidadesCineOfertaTableBase, true);
            eFCorePeliculasEntidadesCineOfertaTableBase.AddTypeMapping(eFCorePeliculasEntidadesCineOfertaMappingBase, false);
            defaultTableMappings5.Add(eFCorePeliculasEntidadesCineOfertaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase2, cineOferta.FindProperty("Id")!, eFCorePeliculasEntidadesCineOfertaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cineIdColumnBase0, cineOferta.FindProperty("CineId")!, eFCorePeliculasEntidadesCineOfertaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaFinColumnBase, cineOferta.FindProperty("FechaFin")!, eFCorePeliculasEntidadesCineOfertaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaInicioColumnBase, cineOferta.FindProperty("FechaInicio")!, eFCorePeliculasEntidadesCineOfertaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)porcentajeDescuentoColumnBase, cineOferta.FindProperty("PorcentajeDescuento")!, eFCorePeliculasEntidadesCineOfertaMappingBase);

            var tableMappings5 = new List<TableMapping>();
            cineOferta.SetRuntimeAnnotation("Relational:TableMappings", tableMappings5);
            var cinesOfertasTable = new Table("CinesOfertas", null, relationalModel);
            var idColumn1 = new Column("Id", "int", cinesOfertasTable);
            cinesOfertasTable.Columns.Add("Id", idColumn1);
            var cineIdColumn = new Column("CineId", "int", cinesOfertasTable)
            {
                IsNullable = true
            };
            cinesOfertasTable.Columns.Add("CineId", cineIdColumn);
            var fechaFinColumn = new Column("FechaFin", "date", cinesOfertasTable);
            cinesOfertasTable.Columns.Add("FechaFin", fechaFinColumn);
            var fechaInicioColumn = new Column("FechaInicio", "date", cinesOfertasTable);
            cinesOfertasTable.Columns.Add("FechaInicio", fechaInicioColumn);
            var porcentajeDescuentoColumn = new Column("PorcentajeDescuento", "decimal(5,2)", cinesOfertasTable);
            cinesOfertasTable.Columns.Add("PorcentajeDescuento", porcentajeDescuentoColumn);
            var pK_CinesOfertas = new UniqueConstraint("PK_CinesOfertas", cinesOfertasTable, new[] { idColumn1 });
            cinesOfertasTable.PrimaryKey = pK_CinesOfertas;
            var pK_CinesOfertasUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.CineOferta",
                new[] { "Id" });
            pK_CinesOfertas.MappedKeys.Add(pK_CinesOfertasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CinesOfertasUc).Add(pK_CinesOfertas);
            cinesOfertasTable.UniqueConstraints.Add("PK_CinesOfertas", pK_CinesOfertas);
            var iX_CinesOfertas_CineId = new TableIndex(
            "IX_CinesOfertas_CineId", cinesOfertasTable, new[] { cineIdColumn }, true);
            var iX_CinesOfertas_CineIdIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.CineOferta",
                new[] { "CineId" });
            iX_CinesOfertas_CineId.MappedIndexes.Add(iX_CinesOfertas_CineIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_CinesOfertas_CineIdIx).Add(iX_CinesOfertas_CineId);
            cinesOfertasTable.Indexes.Add("IX_CinesOfertas_CineId", iX_CinesOfertas_CineId);
            relationalModel.Tables.Add(("CinesOfertas", null), cinesOfertasTable);
            var cinesOfertasTableMapping = new TableMapping(cineOferta, cinesOfertasTable, true);
            cinesOfertasTable.AddTypeMapping(cinesOfertasTableMapping, false);
            tableMappings5.Add(cinesOfertasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn1, cineOferta.FindProperty("Id")!, cinesOfertasTableMapping);
            RelationalModel.CreateColumnMapping(cineIdColumn, cineOferta.FindProperty("CineId")!, cinesOfertasTableMapping);
            RelationalModel.CreateColumnMapping(fechaFinColumn, cineOferta.FindProperty("FechaFin")!, cinesOfertasTableMapping);
            RelationalModel.CreateColumnMapping(fechaInicioColumn, cineOferta.FindProperty("FechaInicio")!, cinesOfertasTableMapping);
            RelationalModel.CreateColumnMapping(porcentajeDescuentoColumn, cineOferta.FindProperty("PorcentajeDescuento")!, cinesOfertasTableMapping);

            var genero = FindEntityType("EFCorePeliculas.Entidades.Genero")!;

            var defaultTableMappings6 = new List<TableMappingBase<ColumnMappingBase>>();
            genero.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings6);
            var eFCorePeliculasEntidadesGeneroTableBase = new TableBase("EFCorePeliculas.Entidades.Genero", null, relationalModel);
            var ejemploColumnBase = new ColumnBase<ColumnMappingBase>("Ejemplo", "nvarchar(max)", eFCorePeliculasEntidadesGeneroTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesGeneroTableBase.Columns.Add("Ejemplo", ejemploColumnBase);
            var estaBorradoColumnBase = new ColumnBase<ColumnMappingBase>("EstaBorrado", "bit", eFCorePeliculasEntidadesGeneroTableBase);
            eFCorePeliculasEntidadesGeneroTableBase.Columns.Add("EstaBorrado", estaBorradoColumnBase);
            var fechaCreacionColumnBase = new ColumnBase<ColumnMappingBase>("FechaCreacion", "datetime2", eFCorePeliculasEntidadesGeneroTableBase);
            eFCorePeliculasEntidadesGeneroTableBase.Columns.Add("FechaCreacion", fechaCreacionColumnBase);
            var identificadorColumnBase = new ColumnBase<ColumnMappingBase>("Identificador", "int", eFCorePeliculasEntidadesGeneroTableBase);
            eFCorePeliculasEntidadesGeneroTableBase.Columns.Add("Identificador", identificadorColumnBase);
            var nombreColumnBase1 = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(150)", eFCorePeliculasEntidadesGeneroTableBase);
            eFCorePeliculasEntidadesGeneroTableBase.Columns.Add("Nombre", nombreColumnBase1);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Genero", eFCorePeliculasEntidadesGeneroTableBase);
            var eFCorePeliculasEntidadesGeneroMappingBase = new TableMappingBase<ColumnMappingBase>(genero, eFCorePeliculasEntidadesGeneroTableBase, true);
            eFCorePeliculasEntidadesGeneroTableBase.AddTypeMapping(eFCorePeliculasEntidadesGeneroMappingBase, false);
            defaultTableMappings6.Add(eFCorePeliculasEntidadesGeneroMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)identificadorColumnBase, genero.FindProperty("Identificador")!, eFCorePeliculasEntidadesGeneroMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ejemploColumnBase, genero.FindProperty("Ejemplo")!, eFCorePeliculasEntidadesGeneroMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)estaBorradoColumnBase, genero.FindProperty("EstaBorrado")!, eFCorePeliculasEntidadesGeneroMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaCreacionColumnBase, genero.FindProperty("FechaCreacion")!, eFCorePeliculasEntidadesGeneroMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase1, genero.FindProperty("Nombre")!, eFCorePeliculasEntidadesGeneroMappingBase);

            var tableMappings6 = new List<TableMapping>();
            genero.SetRuntimeAnnotation("Relational:TableMappings", tableMappings6);
            var generosTable = new Table("Generos", null, relationalModel);
            var identificadorColumn = new Column("Identificador", "int", generosTable);
            generosTable.Columns.Add("Identificador", identificadorColumn);
            var ejemploColumn = new Column("Ejemplo", "nvarchar(max)", generosTable)
            {
                IsNullable = true
            };
            generosTable.Columns.Add("Ejemplo", ejemploColumn);
            var estaBorradoColumn = new Column("EstaBorrado", "bit", generosTable);
            generosTable.Columns.Add("EstaBorrado", estaBorradoColumn);
            var fechaCreacionColumn = new Column("FechaCreacion", "datetime2", generosTable);
            generosTable.Columns.Add("FechaCreacion", fechaCreacionColumn);
            var nombreColumn1 = new Column("Nombre", "nvarchar(150)", generosTable);
            generosTable.Columns.Add("Nombre", nombreColumn1);
            var pK_Generos = new UniqueConstraint("PK_Generos", generosTable, new[] { identificadorColumn });
            generosTable.PrimaryKey = pK_Generos;
            var pK_GenerosUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Genero",
                new[] { "Identificador" });
            pK_Generos.MappedKeys.Add(pK_GenerosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GenerosUc).Add(pK_Generos);
            generosTable.UniqueConstraints.Add("PK_Generos", pK_Generos);
            var iX_Generos_Nombre = new TableIndex(
            "IX_Generos_Nombre", generosTable, new[] { nombreColumn1 }, true);
            var iX_Generos_NombreIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.Genero",
                new[] { "Nombre" });
            iX_Generos_Nombre.MappedIndexes.Add(iX_Generos_NombreIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Generos_NombreIx).Add(iX_Generos_Nombre);
            generosTable.Indexes.Add("IX_Generos_Nombre", iX_Generos_Nombre);
            relationalModel.Tables.Add(("Generos", null), generosTable);
            var generosTableMapping = new TableMapping(genero, generosTable, true);
            generosTable.AddTypeMapping(generosTableMapping, false);
            tableMappings6.Add(generosTableMapping);
            RelationalModel.CreateColumnMapping(identificadorColumn, genero.FindProperty("Identificador")!, generosTableMapping);
            RelationalModel.CreateColumnMapping(ejemploColumn, genero.FindProperty("Ejemplo")!, generosTableMapping);
            RelationalModel.CreateColumnMapping(estaBorradoColumn, genero.FindProperty("EstaBorrado")!, generosTableMapping);
            RelationalModel.CreateColumnMapping(fechaCreacionColumn, genero.FindProperty("FechaCreacion")!, generosTableMapping);
            RelationalModel.CreateColumnMapping(nombreColumn1, genero.FindProperty("Nombre")!, generosTableMapping);

            var log = FindEntityType("EFCorePeliculas.Entidades.Log")!;

            var defaultTableMappings7 = new List<TableMappingBase<ColumnMappingBase>>();
            log.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings7);
            var eFCorePeliculasEntidadesLogTableBase = new TableBase("EFCorePeliculas.Entidades.Log", null, relationalModel);
            var ejemploColumnBase0 = new ColumnBase<ColumnMappingBase>("Ejemplo", "nvarchar(max)", eFCorePeliculasEntidadesLogTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesLogTableBase.Columns.Add("Ejemplo", ejemploColumnBase0);
            var idColumnBase3 = new ColumnBase<ColumnMappingBase>("Id", "uniqueidentifier", eFCorePeliculasEntidadesLogTableBase);
            eFCorePeliculasEntidadesLogTableBase.Columns.Add("Id", idColumnBase3);
            var mensajeColumnBase = new ColumnBase<ColumnMappingBase>("Mensaje", "nvarchar(max)", eFCorePeliculasEntidadesLogTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesLogTableBase.Columns.Add("Mensaje", mensajeColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Log", eFCorePeliculasEntidadesLogTableBase);
            var eFCorePeliculasEntidadesLogMappingBase = new TableMappingBase<ColumnMappingBase>(log, eFCorePeliculasEntidadesLogTableBase, true);
            eFCorePeliculasEntidadesLogTableBase.AddTypeMapping(eFCorePeliculasEntidadesLogMappingBase, false);
            defaultTableMappings7.Add(eFCorePeliculasEntidadesLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase3, log.FindProperty("Id")!, eFCorePeliculasEntidadesLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ejemploColumnBase0, log.FindProperty("Ejemplo")!, eFCorePeliculasEntidadesLogMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mensajeColumnBase, log.FindProperty("Mensaje")!, eFCorePeliculasEntidadesLogMappingBase);

            var tableMappings7 = new List<TableMapping>();
            log.SetRuntimeAnnotation("Relational:TableMappings", tableMappings7);
            var logsTable = new Table("Logs", null, relationalModel);
            var idColumn2 = new Column("Id", "uniqueidentifier", logsTable);
            logsTable.Columns.Add("Id", idColumn2);
            var ejemploColumn0 = new Column("Ejemplo", "nvarchar(max)", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("Ejemplo", ejemploColumn0);
            var mensajeColumn = new Column("Mensaje", "nvarchar(max)", logsTable)
            {
                IsNullable = true
            };
            logsTable.Columns.Add("Mensaje", mensajeColumn);
            var pK_Logs = new UniqueConstraint("PK_Logs", logsTable, new[] { idColumn2 });
            logsTable.PrimaryKey = pK_Logs;
            var pK_LogsUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Log",
                new[] { "Id" });
            pK_Logs.MappedKeys.Add(pK_LogsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_LogsUc).Add(pK_Logs);
            logsTable.UniqueConstraints.Add("PK_Logs", pK_Logs);
            relationalModel.Tables.Add(("Logs", null), logsTable);
            var logsTableMapping = new TableMapping(log, logsTable, true);
            logsTable.AddTypeMapping(logsTableMapping, false);
            tableMappings7.Add(logsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn2, log.FindProperty("Id")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(ejemploColumn0, log.FindProperty("Ejemplo")!, logsTableMapping);
            RelationalModel.CreateColumnMapping(mensajeColumn, log.FindProperty("Mensaje")!, logsTableMapping);

            var mensaje = FindEntityType("EFCorePeliculas.Entidades.Mensaje")!;

            var defaultTableMappings8 = new List<TableMappingBase<ColumnMappingBase>>();
            mensaje.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings8);
            var eFCorePeliculasEntidadesMensajeTableBase = new TableBase("EFCorePeliculas.Entidades.Mensaje", null, relationalModel);
            var contenidoColumnBase = new ColumnBase<ColumnMappingBase>("Contenido", "nvarchar(max)", eFCorePeliculasEntidadesMensajeTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesMensajeTableBase.Columns.Add("Contenido", contenidoColumnBase);
            var emisorIdColumnBase = new ColumnBase<ColumnMappingBase>("EmisorId", "int", eFCorePeliculasEntidadesMensajeTableBase);
            eFCorePeliculasEntidadesMensajeTableBase.Columns.Add("EmisorId", emisorIdColumnBase);
            var idColumnBase4 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesMensajeTableBase);
            eFCorePeliculasEntidadesMensajeTableBase.Columns.Add("Id", idColumnBase4);
            var receptorIdColumnBase = new ColumnBase<ColumnMappingBase>("ReceptorId", "int", eFCorePeliculasEntidadesMensajeTableBase);
            eFCorePeliculasEntidadesMensajeTableBase.Columns.Add("ReceptorId", receptorIdColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Mensaje", eFCorePeliculasEntidadesMensajeTableBase);
            var eFCorePeliculasEntidadesMensajeMappingBase = new TableMappingBase<ColumnMappingBase>(mensaje, eFCorePeliculasEntidadesMensajeTableBase, true);
            eFCorePeliculasEntidadesMensajeTableBase.AddTypeMapping(eFCorePeliculasEntidadesMensajeMappingBase, false);
            defaultTableMappings8.Add(eFCorePeliculasEntidadesMensajeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase4, mensaje.FindProperty("Id")!, eFCorePeliculasEntidadesMensajeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)contenidoColumnBase, mensaje.FindProperty("Contenido")!, eFCorePeliculasEntidadesMensajeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)emisorIdColumnBase, mensaje.FindProperty("EmisorId")!, eFCorePeliculasEntidadesMensajeMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)receptorIdColumnBase, mensaje.FindProperty("ReceptorId")!, eFCorePeliculasEntidadesMensajeMappingBase);

            var tableMappings8 = new List<TableMapping>();
            mensaje.SetRuntimeAnnotation("Relational:TableMappings", tableMappings8);
            var mensajesTable = new Table("Mensajes", null, relationalModel);
            var idColumn3 = new Column("Id", "int", mensajesTable);
            mensajesTable.Columns.Add("Id", idColumn3);
            var contenidoColumn = new Column("Contenido", "nvarchar(max)", mensajesTable)
            {
                IsNullable = true
            };
            mensajesTable.Columns.Add("Contenido", contenidoColumn);
            var emisorIdColumn = new Column("EmisorId", "int", mensajesTable);
            mensajesTable.Columns.Add("EmisorId", emisorIdColumn);
            var receptorIdColumn = new Column("ReceptorId", "int", mensajesTable);
            mensajesTable.Columns.Add("ReceptorId", receptorIdColumn);
            var pK_Mensajes = new UniqueConstraint("PK_Mensajes", mensajesTable, new[] { idColumn3 });
            mensajesTable.PrimaryKey = pK_Mensajes;
            var pK_MensajesUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Mensaje",
                new[] { "Id" });
            pK_Mensajes.MappedKeys.Add(pK_MensajesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MensajesUc).Add(pK_Mensajes);
            mensajesTable.UniqueConstraints.Add("PK_Mensajes", pK_Mensajes);
            var iX_Mensajes_EmisorId = new TableIndex(
            "IX_Mensajes_EmisorId", mensajesTable, new[] { emisorIdColumn }, false);
            var iX_Mensajes_EmisorIdIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.Mensaje",
                new[] { "EmisorId" });
            iX_Mensajes_EmisorId.MappedIndexes.Add(iX_Mensajes_EmisorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Mensajes_EmisorIdIx).Add(iX_Mensajes_EmisorId);
            mensajesTable.Indexes.Add("IX_Mensajes_EmisorId", iX_Mensajes_EmisorId);
            var iX_Mensajes_ReceptorId = new TableIndex(
            "IX_Mensajes_ReceptorId", mensajesTable, new[] { receptorIdColumn }, false);
            var iX_Mensajes_ReceptorIdIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.Mensaje",
                new[] { "ReceptorId" });
            iX_Mensajes_ReceptorId.MappedIndexes.Add(iX_Mensajes_ReceptorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Mensajes_ReceptorIdIx).Add(iX_Mensajes_ReceptorId);
            mensajesTable.Indexes.Add("IX_Mensajes_ReceptorId", iX_Mensajes_ReceptorId);
            relationalModel.Tables.Add(("Mensajes", null), mensajesTable);
            var mensajesTableMapping = new TableMapping(mensaje, mensajesTable, true);
            mensajesTable.AddTypeMapping(mensajesTableMapping, false);
            tableMappings8.Add(mensajesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn3, mensaje.FindProperty("Id")!, mensajesTableMapping);
            RelationalModel.CreateColumnMapping(contenidoColumn, mensaje.FindProperty("Contenido")!, mensajesTableMapping);
            RelationalModel.CreateColumnMapping(emisorIdColumn, mensaje.FindProperty("EmisorId")!, mensajesTableMapping);
            RelationalModel.CreateColumnMapping(receptorIdColumn, mensaje.FindProperty("ReceptorId")!, mensajesTableMapping);

            var merchandising = FindEntityType("EFCorePeliculas.Entidades.Merchandising")!;

            var defaultTableMappings9 = new List<TableMappingBase<ColumnMappingBase>>();
            merchandising.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings9);
            var eFCorePeliculasEntidadesProductoTableBase = new TableBase("EFCorePeliculas.Entidades.Producto", null, relationalModel);
            var idColumnBase5 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesProductoTableBase);
            eFCorePeliculasEntidadesProductoTableBase.Columns.Add("Id", idColumnBase5);
            var nombreColumnBase2 = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(max)", eFCorePeliculasEntidadesProductoTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesProductoTableBase.Columns.Add("Nombre", nombreColumnBase2);
            var precioColumnBase = new ColumnBase<ColumnMappingBase>("Precio", "decimal(18,2)", eFCorePeliculasEntidadesProductoTableBase);
            eFCorePeliculasEntidadesProductoTableBase.Columns.Add("Precio", precioColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Producto", eFCorePeliculasEntidadesProductoTableBase);
            var eFCorePeliculasEntidadesProductoMappingBase = new TableMappingBase<ColumnMappingBase>(merchandising, eFCorePeliculasEntidadesProductoTableBase, false);
            eFCorePeliculasEntidadesProductoTableBase.AddTypeMapping(eFCorePeliculasEntidadesProductoMappingBase, false);
            defaultTableMappings9.Add(eFCorePeliculasEntidadesProductoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, merchandising.FindProperty("Id")!, eFCorePeliculasEntidadesProductoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase2, merchandising.FindProperty("Nombre")!, eFCorePeliculasEntidadesProductoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)precioColumnBase, merchandising.FindProperty("Precio")!, eFCorePeliculasEntidadesProductoMappingBase);

            var defaultTableMappings10 = new List<TableMappingBase<ColumnMappingBase>>();
            merchandising.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings10);
            var eFCorePeliculasEntidadesMerchandisingTableBase = new TableBase("EFCorePeliculas.Entidades.Merchandising", null, relationalModel);
            var disponibleEnInventarioColumnBase = new ColumnBase<ColumnMappingBase>("DisponibleEnInventario", "bit", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("DisponibleEnInventario", disponibleEnInventarioColumnBase);
            var esColeccionableColumnBase = new ColumnBase<ColumnMappingBase>("EsColeccionable", "bit", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("EsColeccionable", esColeccionableColumnBase);
            var esRopaColumnBase = new ColumnBase<ColumnMappingBase>("EsRopa", "bit", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("EsRopa", esRopaColumnBase);
            var idColumnBase6 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("Id", idColumnBase6);
            var pesoColumnBase = new ColumnBase<ColumnMappingBase>("Peso", "float", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("Peso", pesoColumnBase);
            var volumenColumnBase = new ColumnBase<ColumnMappingBase>("Volumen", "float", eFCorePeliculasEntidadesMerchandisingTableBase);
            eFCorePeliculasEntidadesMerchandisingTableBase.Columns.Add("Volumen", volumenColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Merchandising", eFCorePeliculasEntidadesMerchandisingTableBase);
            var eFCorePeliculasEntidadesMerchandisingMappingBase = new TableMappingBase<ColumnMappingBase>(merchandising, eFCorePeliculasEntidadesMerchandisingTableBase, true);
            eFCorePeliculasEntidadesMerchandisingTableBase.AddTypeMapping(eFCorePeliculasEntidadesMerchandisingMappingBase, false);
            defaultTableMappings10.Add(eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase6, merchandising.FindProperty("Id")!, eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)disponibleEnInventarioColumnBase, merchandising.FindProperty("DisponibleEnInventario")!, eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)esColeccionableColumnBase, merchandising.FindProperty("EsColeccionable")!, eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)esRopaColumnBase, merchandising.FindProperty("EsRopa")!, eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)pesoColumnBase, merchandising.FindProperty("Peso")!, eFCorePeliculasEntidadesMerchandisingMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)volumenColumnBase, merchandising.FindProperty("Volumen")!, eFCorePeliculasEntidadesMerchandisingMappingBase);

            var tableMappings9 = new List<TableMapping>();
            merchandising.SetRuntimeAnnotation("Relational:TableMappings", tableMappings9);
            var productosTable = new Table("Productos", null, relationalModel);
            var idColumn4 = new Column("Id", "int", productosTable);
            productosTable.Columns.Add("Id", idColumn4);
            var nombreColumn2 = new Column("Nombre", "nvarchar(max)", productosTable)
            {
                IsNullable = true
            };
            productosTable.Columns.Add("Nombre", nombreColumn2);
            var precioColumn = new Column("Precio", "decimal(18,2)", productosTable);
            productosTable.Columns.Add("Precio", precioColumn);
            var pK_Productos = new UniqueConstraint("PK_Productos", productosTable, new[] { idColumn4 });
            productosTable.PrimaryKey = pK_Productos;
            var pK_ProductosUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Producto",
                new[] { "Id" });
            pK_Productos.MappedKeys.Add(pK_ProductosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ProductosUc).Add(pK_Productos);
            productosTable.UniqueConstraints.Add("PK_Productos", pK_Productos);
            relationalModel.Tables.Add(("Productos", null), productosTable);
            var productosTableMapping = new TableMapping(merchandising, productosTable, false)
            {
                IsSharedTablePrincipal = false,
            };
            productosTable.AddTypeMapping(productosTableMapping, false);
            tableMappings9.Add(productosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn4, merchandising.FindProperty("Id")!, productosTableMapping);
            RelationalModel.CreateColumnMapping(nombreColumn2, merchandising.FindProperty("Nombre")!, productosTableMapping);
            RelationalModel.CreateColumnMapping(precioColumn, merchandising.FindProperty("Precio")!, productosTableMapping);
            var merchandisingTable = new Table("Merchandising", null, relationalModel);
            var idColumn5 = new Column("Id", "int", merchandisingTable);
            merchandisingTable.Columns.Add("Id", idColumn5);
            var disponibleEnInventarioColumn = new Column("DisponibleEnInventario", "bit", merchandisingTable);
            merchandisingTable.Columns.Add("DisponibleEnInventario", disponibleEnInventarioColumn);
            var esColeccionableColumn = new Column("EsColeccionable", "bit", merchandisingTable);
            merchandisingTable.Columns.Add("EsColeccionable", esColeccionableColumn);
            var esRopaColumn = new Column("EsRopa", "bit", merchandisingTable);
            merchandisingTable.Columns.Add("EsRopa", esRopaColumn);
            var pesoColumn = new Column("Peso", "float", merchandisingTable);
            merchandisingTable.Columns.Add("Peso", pesoColumn);
            var volumenColumn = new Column("Volumen", "float", merchandisingTable);
            merchandisingTable.Columns.Add("Volumen", volumenColumn);
            var pK_Merchandising = new UniqueConstraint("PK_Merchandising", merchandisingTable, new[] { idColumn5 });
            merchandisingTable.PrimaryKey = pK_Merchandising;
            var pK_MerchandisingUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Producto",
                new[] { "Id" });
            pK_Merchandising.MappedKeys.Add(pK_MerchandisingUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_MerchandisingUc).Add(pK_Merchandising);
            merchandisingTable.UniqueConstraints.Add("PK_Merchandising", pK_Merchandising);
            relationalModel.Tables.Add(("Merchandising", null), merchandisingTable);
            var merchandisingTableMapping = new TableMapping(merchandising, merchandisingTable, true);
            merchandisingTable.AddTypeMapping(merchandisingTableMapping, false);
            tableMappings9.Add(merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(idColumn5, merchandising.FindProperty("Id")!, merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(disponibleEnInventarioColumn, merchandising.FindProperty("DisponibleEnInventario")!, merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(esColeccionableColumn, merchandising.FindProperty("EsColeccionable")!, merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(esRopaColumn, merchandising.FindProperty("EsRopa")!, merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(pesoColumn, merchandising.FindProperty("Peso")!, merchandisingTableMapping);
            RelationalModel.CreateColumnMapping(volumenColumn, merchandising.FindProperty("Volumen")!, merchandisingTableMapping);

            var pago = FindEntityType("EFCorePeliculas.Entidades.Pago")!;

            var defaultTableMappings11 = new List<TableMappingBase<ColumnMappingBase>>();
            pago.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings11);
            var eFCorePeliculasEntidadesPagoTableBase = new TableBase("EFCorePeliculas.Entidades.Pago", null, relationalModel);
            var correoElectronicoColumnBase = new ColumnBase<ColumnMappingBase>("CorreoElectronico", "nvarchar(150)", eFCorePeliculasEntidadesPagoTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("CorreoElectronico", correoElectronicoColumnBase);
            var fechaTransaccionColumnBase = new ColumnBase<ColumnMappingBase>("FechaTransaccion", "date", eFCorePeliculasEntidadesPagoTableBase);
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("FechaTransaccion", fechaTransaccionColumnBase);
            var idColumnBase7 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesPagoTableBase);
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("Id", idColumnBase7);
            var montoColumnBase = new ColumnBase<ColumnMappingBase>("Monto", "decimal(18,2)", eFCorePeliculasEntidadesPagoTableBase);
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("Monto", montoColumnBase);
            var tipoPagoColumnBase = new ColumnBase<ColumnMappingBase>("TipoPago", "int", eFCorePeliculasEntidadesPagoTableBase);
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("TipoPago", tipoPagoColumnBase);
            var ultimos4DigitosColumnBase = new ColumnBase<ColumnMappingBase>("Ultimos4Digitos", "char(4)", eFCorePeliculasEntidadesPagoTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesPagoTableBase.Columns.Add("Ultimos4Digitos", ultimos4DigitosColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Pago", eFCorePeliculasEntidadesPagoTableBase);
            var eFCorePeliculasEntidadesPagoMappingBase = new TableMappingBase<ColumnMappingBase>(pago, eFCorePeliculasEntidadesPagoTableBase, true);
            eFCorePeliculasEntidadesPagoTableBase.AddTypeMapping(eFCorePeliculasEntidadesPagoMappingBase, false);
            defaultTableMappings11.Add(eFCorePeliculasEntidadesPagoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, pago.FindProperty("Id")!, eFCorePeliculasEntidadesPagoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaTransaccionColumnBase, pago.FindProperty("FechaTransaccion")!, eFCorePeliculasEntidadesPagoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)montoColumnBase, pago.FindProperty("Monto")!, eFCorePeliculasEntidadesPagoMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoPagoColumnBase, pago.FindProperty("TipoPago")!, eFCorePeliculasEntidadesPagoMappingBase);

            var tableMappings10 = new List<TableMapping>();
            pago.SetRuntimeAnnotation("Relational:TableMappings", tableMappings10);
            var pagosTable = new Table("Pagos", null, relationalModel);
            var idColumn6 = new Column("Id", "int", pagosTable);
            pagosTable.Columns.Add("Id", idColumn6);
            var correoElectronicoColumn = new Column("CorreoElectronico", "nvarchar(150)", pagosTable)
            {
                IsNullable = true
            };
            pagosTable.Columns.Add("CorreoElectronico", correoElectronicoColumn);
            var fechaTransaccionColumn = new Column("FechaTransaccion", "date", pagosTable);
            pagosTable.Columns.Add("FechaTransaccion", fechaTransaccionColumn);
            var montoColumn = new Column("Monto", "decimal(18,2)", pagosTable);
            pagosTable.Columns.Add("Monto", montoColumn);
            var tipoPagoColumn = new Column("TipoPago", "int", pagosTable);
            pagosTable.Columns.Add("TipoPago", tipoPagoColumn);
            var ultimos4DigitosColumn = new Column("Ultimos4Digitos", "char(4)", pagosTable)
            {
                IsNullable = true
            };
            pagosTable.Columns.Add("Ultimos4Digitos", ultimos4DigitosColumn);
            var pK_Pagos = new UniqueConstraint("PK_Pagos", pagosTable, new[] { idColumn6 });
            pagosTable.PrimaryKey = pK_Pagos;
            var pK_PagosUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Pago",
                new[] { "Id" });
            pK_Pagos.MappedKeys.Add(pK_PagosUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PagosUc).Add(pK_Pagos);
            pagosTable.UniqueConstraints.Add("PK_Pagos", pK_Pagos);
            relationalModel.Tables.Add(("Pagos", null), pagosTable);
            var pagosTableMapping = new TableMapping(pago, pagosTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            pagosTable.AddTypeMapping(pagosTableMapping, false);
            tableMappings10.Add(pagosTableMapping);
            RelationalModel.CreateColumnMapping(idColumn6, pago.FindProperty("Id")!, pagosTableMapping);
            RelationalModel.CreateColumnMapping(fechaTransaccionColumn, pago.FindProperty("FechaTransaccion")!, pagosTableMapping);
            RelationalModel.CreateColumnMapping(montoColumn, pago.FindProperty("Monto")!, pagosTableMapping);
            RelationalModel.CreateColumnMapping(tipoPagoColumn, pago.FindProperty("TipoPago")!, pagosTableMapping);

            var pagoPaypal = FindEntityType("EFCorePeliculas.Entidades.PagoPaypal")!;

            var defaultTableMappings12 = new List<TableMappingBase<ColumnMappingBase>>();
            pagoPaypal.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings12);
            var eFCorePeliculasEntidadesPagoMappingBase0 = new TableMappingBase<ColumnMappingBase>(pagoPaypal, eFCorePeliculasEntidadesPagoTableBase, true);
            eFCorePeliculasEntidadesPagoTableBase.AddTypeMapping(eFCorePeliculasEntidadesPagoMappingBase0, false);
            defaultTableMappings12.Add(eFCorePeliculasEntidadesPagoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, pagoPaypal.FindProperty("Id")!, eFCorePeliculasEntidadesPagoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)correoElectronicoColumnBase, pagoPaypal.FindProperty("CorreoElectronico")!, eFCorePeliculasEntidadesPagoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaTransaccionColumnBase, pagoPaypal.FindProperty("FechaTransaccion")!, eFCorePeliculasEntidadesPagoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)montoColumnBase, pagoPaypal.FindProperty("Monto")!, eFCorePeliculasEntidadesPagoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoPagoColumnBase, pagoPaypal.FindProperty("TipoPago")!, eFCorePeliculasEntidadesPagoMappingBase0);

            var tableMappings11 = new List<TableMapping>();
            pagoPaypal.SetRuntimeAnnotation("Relational:TableMappings", tableMappings11);
            var pagosTableMapping0 = new TableMapping(pagoPaypal, pagosTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            pagosTable.AddTypeMapping(pagosTableMapping0, false);
            tableMappings11.Add(pagosTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn6, pagoPaypal.FindProperty("Id")!, pagosTableMapping0);
            RelationalModel.CreateColumnMapping(correoElectronicoColumn, pagoPaypal.FindProperty("CorreoElectronico")!, pagosTableMapping0);
            RelationalModel.CreateColumnMapping(fechaTransaccionColumn, pagoPaypal.FindProperty("FechaTransaccion")!, pagosTableMapping0);
            RelationalModel.CreateColumnMapping(montoColumn, pagoPaypal.FindProperty("Monto")!, pagosTableMapping0);
            RelationalModel.CreateColumnMapping(tipoPagoColumn, pagoPaypal.FindProperty("TipoPago")!, pagosTableMapping0);

            var pagoTarjeta = FindEntityType("EFCorePeliculas.Entidades.PagoTarjeta")!;

            var defaultTableMappings13 = new List<TableMappingBase<ColumnMappingBase>>();
            pagoTarjeta.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings13);
            var eFCorePeliculasEntidadesPagoMappingBase1 = new TableMappingBase<ColumnMappingBase>(pagoTarjeta, eFCorePeliculasEntidadesPagoTableBase, true);
            eFCorePeliculasEntidadesPagoTableBase.AddTypeMapping(eFCorePeliculasEntidadesPagoMappingBase1, false);
            defaultTableMappings13.Add(eFCorePeliculasEntidadesPagoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase7, pagoTarjeta.FindProperty("Id")!, eFCorePeliculasEntidadesPagoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaTransaccionColumnBase, pagoTarjeta.FindProperty("FechaTransaccion")!, eFCorePeliculasEntidadesPagoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)montoColumnBase, pagoTarjeta.FindProperty("Monto")!, eFCorePeliculasEntidadesPagoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoPagoColumnBase, pagoTarjeta.FindProperty("TipoPago")!, eFCorePeliculasEntidadesPagoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ultimos4DigitosColumnBase, pagoTarjeta.FindProperty("Ultimos4Digitos")!, eFCorePeliculasEntidadesPagoMappingBase1);

            var tableMappings12 = new List<TableMapping>();
            pagoTarjeta.SetRuntimeAnnotation("Relational:TableMappings", tableMappings12);
            var pagosTableMapping1 = new TableMapping(pagoTarjeta, pagosTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            pagosTable.AddTypeMapping(pagosTableMapping1, false);
            tableMappings12.Add(pagosTableMapping1);
            RelationalModel.CreateColumnMapping(idColumn6, pagoTarjeta.FindProperty("Id")!, pagosTableMapping1);
            RelationalModel.CreateColumnMapping(fechaTransaccionColumn, pagoTarjeta.FindProperty("FechaTransaccion")!, pagosTableMapping1);
            RelationalModel.CreateColumnMapping(montoColumn, pagoTarjeta.FindProperty("Monto")!, pagosTableMapping1);
            RelationalModel.CreateColumnMapping(tipoPagoColumn, pagoTarjeta.FindProperty("TipoPago")!, pagosTableMapping1);
            RelationalModel.CreateColumnMapping(ultimos4DigitosColumn, pagoTarjeta.FindProperty("Ultimos4Digitos")!, pagosTableMapping1);

            var pelicula = FindEntityType("EFCorePeliculas.Entidades.Pelicula")!;

            var defaultTableMappings14 = new List<TableMappingBase<ColumnMappingBase>>();
            pelicula.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings14);
            var eFCorePeliculasEntidadesPeliculaTableBase = new TableBase("EFCorePeliculas.Entidades.Pelicula", null, relationalModel);
            var enCarteleraColumnBase = new ColumnBase<ColumnMappingBase>("EnCartelera", "bit", eFCorePeliculasEntidadesPeliculaTableBase);
            eFCorePeliculasEntidadesPeliculaTableBase.Columns.Add("EnCartelera", enCarteleraColumnBase);
            var fechaEstrenoColumnBase = new ColumnBase<ColumnMappingBase>("FechaEstreno", "date", eFCorePeliculasEntidadesPeliculaTableBase);
            eFCorePeliculasEntidadesPeliculaTableBase.Columns.Add("FechaEstreno", fechaEstrenoColumnBase);
            var idColumnBase8 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesPeliculaTableBase);
            eFCorePeliculasEntidadesPeliculaTableBase.Columns.Add("Id", idColumnBase8);
            var posterURLColumnBase = new ColumnBase<ColumnMappingBase>("PosterURL", "varchar(500)", eFCorePeliculasEntidadesPeliculaTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesPeliculaTableBase.Columns.Add("PosterURL", posterURLColumnBase);
            var tituloColumnBase = new ColumnBase<ColumnMappingBase>("Titulo", "nvarchar(250)", eFCorePeliculasEntidadesPeliculaTableBase);
            eFCorePeliculasEntidadesPeliculaTableBase.Columns.Add("Titulo", tituloColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Pelicula", eFCorePeliculasEntidadesPeliculaTableBase);
            var eFCorePeliculasEntidadesPeliculaMappingBase = new TableMappingBase<ColumnMappingBase>(pelicula, eFCorePeliculasEntidadesPeliculaTableBase, true);
            eFCorePeliculasEntidadesPeliculaTableBase.AddTypeMapping(eFCorePeliculasEntidadesPeliculaMappingBase, false);
            defaultTableMappings14.Add(eFCorePeliculasEntidadesPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase8, pelicula.FindProperty("Id")!, eFCorePeliculasEntidadesPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)enCarteleraColumnBase, pelicula.FindProperty("EnCartelera")!, eFCorePeliculasEntidadesPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)fechaEstrenoColumnBase, pelicula.FindProperty("FechaEstreno")!, eFCorePeliculasEntidadesPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)posterURLColumnBase, pelicula.FindProperty("PosterURL")!, eFCorePeliculasEntidadesPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tituloColumnBase, pelicula.FindProperty("Titulo")!, eFCorePeliculasEntidadesPeliculaMappingBase);

            var tableMappings13 = new List<TableMapping>();
            pelicula.SetRuntimeAnnotation("Relational:TableMappings", tableMappings13);
            var peliculasTable = new Table("Peliculas", null, relationalModel);
            var idColumn7 = new Column("Id", "int", peliculasTable);
            peliculasTable.Columns.Add("Id", idColumn7);
            var enCarteleraColumn = new Column("EnCartelera", "bit", peliculasTable);
            peliculasTable.Columns.Add("EnCartelera", enCarteleraColumn);
            var fechaEstrenoColumn = new Column("FechaEstreno", "date", peliculasTable);
            peliculasTable.Columns.Add("FechaEstreno", fechaEstrenoColumn);
            var posterURLColumn = new Column("PosterURL", "varchar(500)", peliculasTable)
            {
                IsNullable = true
            };
            peliculasTable.Columns.Add("PosterURL", posterURLColumn);
            var tituloColumn = new Column("Titulo", "nvarchar(250)", peliculasTable);
            peliculasTable.Columns.Add("Titulo", tituloColumn);
            var pK_Peliculas = new UniqueConstraint("PK_Peliculas", peliculasTable, new[] { idColumn7 });
            peliculasTable.PrimaryKey = pK_Peliculas;
            var pK_PeliculasUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Pelicula",
                new[] { "Id" });
            pK_Peliculas.MappedKeys.Add(pK_PeliculasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PeliculasUc).Add(pK_Peliculas);
            peliculasTable.UniqueConstraints.Add("PK_Peliculas", pK_Peliculas);
            relationalModel.Tables.Add(("Peliculas", null), peliculasTable);
            var peliculasTableMapping = new TableMapping(pelicula, peliculasTable, true);
            peliculasTable.AddTypeMapping(peliculasTableMapping, false);
            tableMappings13.Add(peliculasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn7, pelicula.FindProperty("Id")!, peliculasTableMapping);
            RelationalModel.CreateColumnMapping(enCarteleraColumn, pelicula.FindProperty("EnCartelera")!, peliculasTableMapping);
            RelationalModel.CreateColumnMapping(fechaEstrenoColumn, pelicula.FindProperty("FechaEstreno")!, peliculasTableMapping);
            RelationalModel.CreateColumnMapping(posterURLColumn, pelicula.FindProperty("PosterURL")!, peliculasTableMapping);
            RelationalModel.CreateColumnMapping(tituloColumn, pelicula.FindProperty("Titulo")!, peliculasTableMapping);

            var peliculaActor = FindEntityType("EFCorePeliculas.Entidades.PeliculaActor")!;

            var defaultTableMappings15 = new List<TableMappingBase<ColumnMappingBase>>();
            peliculaActor.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings15);
            var eFCorePeliculasEntidadesPeliculaActorTableBase = new TableBase("EFCorePeliculas.Entidades.PeliculaActor", null, relationalModel);
            var actorIdColumnBase1 = new ColumnBase<ColumnMappingBase>("ActorId", "int", eFCorePeliculasEntidadesPeliculaActorTableBase);
            eFCorePeliculasEntidadesPeliculaActorTableBase.Columns.Add("ActorId", actorIdColumnBase1);
            var ordenColumnBase = new ColumnBase<ColumnMappingBase>("Orden", "int", eFCorePeliculasEntidadesPeliculaActorTableBase);
            eFCorePeliculasEntidadesPeliculaActorTableBase.Columns.Add("Orden", ordenColumnBase);
            var peliculaIdColumnBase = new ColumnBase<ColumnMappingBase>("PeliculaId", "int", eFCorePeliculasEntidadesPeliculaActorTableBase);
            eFCorePeliculasEntidadesPeliculaActorTableBase.Columns.Add("PeliculaId", peliculaIdColumnBase);
            var personajeColumnBase = new ColumnBase<ColumnMappingBase>("Personaje", "nvarchar(150)", eFCorePeliculasEntidadesPeliculaActorTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesPeliculaActorTableBase.Columns.Add("Personaje", personajeColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.PeliculaActor", eFCorePeliculasEntidadesPeliculaActorTableBase);
            var eFCorePeliculasEntidadesPeliculaActorMappingBase = new TableMappingBase<ColumnMappingBase>(peliculaActor, eFCorePeliculasEntidadesPeliculaActorTableBase, true);
            eFCorePeliculasEntidadesPeliculaActorTableBase.AddTypeMapping(eFCorePeliculasEntidadesPeliculaActorMappingBase, false);
            defaultTableMappings15.Add(eFCorePeliculasEntidadesPeliculaActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)actorIdColumnBase1, peliculaActor.FindProperty("ActorId")!, eFCorePeliculasEntidadesPeliculaActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peliculaIdColumnBase, peliculaActor.FindProperty("PeliculaId")!, eFCorePeliculasEntidadesPeliculaActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)ordenColumnBase, peliculaActor.FindProperty("Orden")!, eFCorePeliculasEntidadesPeliculaActorMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)personajeColumnBase, peliculaActor.FindProperty("Personaje")!, eFCorePeliculasEntidadesPeliculaActorMappingBase);

            var tableMappings14 = new List<TableMapping>();
            peliculaActor.SetRuntimeAnnotation("Relational:TableMappings", tableMappings14);
            var peliculasActoresTable = new Table("PeliculasActores", null, relationalModel);
            var peliculaIdColumn = new Column("PeliculaId", "int", peliculasActoresTable);
            peliculasActoresTable.Columns.Add("PeliculaId", peliculaIdColumn);
            var actorIdColumn = new Column("ActorId", "int", peliculasActoresTable);
            peliculasActoresTable.Columns.Add("ActorId", actorIdColumn);
            var ordenColumn = new Column("Orden", "int", peliculasActoresTable);
            peliculasActoresTable.Columns.Add("Orden", ordenColumn);
            var personajeColumn = new Column("Personaje", "nvarchar(150)", peliculasActoresTable)
            {
                IsNullable = true
            };
            peliculasActoresTable.Columns.Add("Personaje", personajeColumn);
            var pK_PeliculasActores = new UniqueConstraint("PK_PeliculasActores", peliculasActoresTable, new[] { peliculaIdColumn, actorIdColumn });
            peliculasActoresTable.PrimaryKey = pK_PeliculasActores;
            var pK_PeliculasActoresUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.PeliculaActor",
                new[] { "PeliculaId", "ActorId" });
            pK_PeliculasActores.MappedKeys.Add(pK_PeliculasActoresUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PeliculasActoresUc).Add(pK_PeliculasActores);
            peliculasActoresTable.UniqueConstraints.Add("PK_PeliculasActores", pK_PeliculasActores);
            var iX_PeliculasActores_ActorId = new TableIndex(
            "IX_PeliculasActores_ActorId", peliculasActoresTable, new[] { actorIdColumn }, false);
            var iX_PeliculasActores_ActorIdIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.PeliculaActor",
                new[] { "ActorId" });
            iX_PeliculasActores_ActorId.MappedIndexes.Add(iX_PeliculasActores_ActorIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PeliculasActores_ActorIdIx).Add(iX_PeliculasActores_ActorId);
            peliculasActoresTable.Indexes.Add("IX_PeliculasActores_ActorId", iX_PeliculasActores_ActorId);
            relationalModel.Tables.Add(("PeliculasActores", null), peliculasActoresTable);
            var peliculasActoresTableMapping = new TableMapping(peliculaActor, peliculasActoresTable, true);
            peliculasActoresTable.AddTypeMapping(peliculasActoresTableMapping, false);
            tableMappings14.Add(peliculasActoresTableMapping);
            RelationalModel.CreateColumnMapping(actorIdColumn, peliculaActor.FindProperty("ActorId")!, peliculasActoresTableMapping);
            RelationalModel.CreateColumnMapping(peliculaIdColumn, peliculaActor.FindProperty("PeliculaId")!, peliculasActoresTableMapping);
            RelationalModel.CreateColumnMapping(ordenColumn, peliculaActor.FindProperty("Orden")!, peliculasActoresTableMapping);
            RelationalModel.CreateColumnMapping(personajeColumn, peliculaActor.FindProperty("Personaje")!, peliculasActoresTableMapping);

            var peliculaAlquilable = FindEntityType("EFCorePeliculas.Entidades.PeliculaAlquilable")!;

            var defaultTableMappings16 = new List<TableMappingBase<ColumnMappingBase>>();
            peliculaAlquilable.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings16);
            var eFCorePeliculasEntidadesProductoMappingBase0 = new TableMappingBase<ColumnMappingBase>(peliculaAlquilable, eFCorePeliculasEntidadesProductoTableBase, false);
            eFCorePeliculasEntidadesProductoTableBase.AddTypeMapping(eFCorePeliculasEntidadesProductoMappingBase0, false);
            defaultTableMappings16.Add(eFCorePeliculasEntidadesProductoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, peliculaAlquilable.FindProperty("Id")!, eFCorePeliculasEntidadesProductoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase2, peliculaAlquilable.FindProperty("Nombre")!, eFCorePeliculasEntidadesProductoMappingBase0);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)precioColumnBase, peliculaAlquilable.FindProperty("Precio")!, eFCorePeliculasEntidadesProductoMappingBase0);

            var defaultTableMappings17 = new List<TableMappingBase<ColumnMappingBase>>();
            peliculaAlquilable.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings17);
            var eFCorePeliculasEntidadesPeliculaAlquilableTableBase = new TableBase("EFCorePeliculas.Entidades.PeliculaAlquilable", null, relationalModel);
            var idColumnBase9 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesPeliculaAlquilableTableBase);
            eFCorePeliculasEntidadesPeliculaAlquilableTableBase.Columns.Add("Id", idColumnBase9);
            var peliculaIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PeliculaId", "int", eFCorePeliculasEntidadesPeliculaAlquilableTableBase);
            eFCorePeliculasEntidadesPeliculaAlquilableTableBase.Columns.Add("PeliculaId", peliculaIdColumnBase0);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.PeliculaAlquilable", eFCorePeliculasEntidadesPeliculaAlquilableTableBase);
            var eFCorePeliculasEntidadesPeliculaAlquilableMappingBase = new TableMappingBase<ColumnMappingBase>(peliculaAlquilable, eFCorePeliculasEntidadesPeliculaAlquilableTableBase, true);
            eFCorePeliculasEntidadesPeliculaAlquilableTableBase.AddTypeMapping(eFCorePeliculasEntidadesPeliculaAlquilableMappingBase, false);
            defaultTableMappings17.Add(eFCorePeliculasEntidadesPeliculaAlquilableMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase9, peliculaAlquilable.FindProperty("Id")!, eFCorePeliculasEntidadesPeliculaAlquilableMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peliculaIdColumnBase0, peliculaAlquilable.FindProperty("PeliculaId")!, eFCorePeliculasEntidadesPeliculaAlquilableMappingBase);

            var tableMappings15 = new List<TableMapping>();
            peliculaAlquilable.SetRuntimeAnnotation("Relational:TableMappings", tableMappings15);
            var productosTableMapping0 = new TableMapping(peliculaAlquilable, productosTable, false)
            {
                IsSharedTablePrincipal = false,
            };
            productosTable.AddTypeMapping(productosTableMapping0, false);
            tableMappings15.Add(productosTableMapping0);
            RelationalModel.CreateColumnMapping(idColumn4, peliculaAlquilable.FindProperty("Id")!, productosTableMapping0);
            RelationalModel.CreateColumnMapping(nombreColumn2, peliculaAlquilable.FindProperty("Nombre")!, productosTableMapping0);
            RelationalModel.CreateColumnMapping(precioColumn, peliculaAlquilable.FindProperty("Precio")!, productosTableMapping0);
            var peliculasAlquilablesTable = new Table("PeliculasAlquilables", null, relationalModel);
            var idColumn8 = new Column("Id", "int", peliculasAlquilablesTable);
            peliculasAlquilablesTable.Columns.Add("Id", idColumn8);
            var peliculaIdColumn0 = new Column("PeliculaId", "int", peliculasAlquilablesTable);
            peliculasAlquilablesTable.Columns.Add("PeliculaId", peliculaIdColumn0);
            var pK_PeliculasAlquilables = new UniqueConstraint("PK_PeliculasAlquilables", peliculasAlquilablesTable, new[] { idColumn8 });
            peliculasAlquilablesTable.PrimaryKey = pK_PeliculasAlquilables;
            var pK_PeliculasAlquilablesUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Producto",
                new[] { "Id" });
            pK_PeliculasAlquilables.MappedKeys.Add(pK_PeliculasAlquilablesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PeliculasAlquilablesUc).Add(pK_PeliculasAlquilables);
            peliculasAlquilablesTable.UniqueConstraints.Add("PK_PeliculasAlquilables", pK_PeliculasAlquilables);
            relationalModel.Tables.Add(("PeliculasAlquilables", null), peliculasAlquilablesTable);
            var peliculasAlquilablesTableMapping = new TableMapping(peliculaAlquilable, peliculasAlquilablesTable, true);
            peliculasAlquilablesTable.AddTypeMapping(peliculasAlquilablesTableMapping, false);
            tableMappings15.Add(peliculasAlquilablesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn8, peliculaAlquilable.FindProperty("Id")!, peliculasAlquilablesTableMapping);
            RelationalModel.CreateColumnMapping(peliculaIdColumn0, peliculaAlquilable.FindProperty("PeliculaId")!, peliculasAlquilablesTableMapping);

            var persona = FindEntityType("EFCorePeliculas.Entidades.Persona")!;

            var defaultTableMappings18 = new List<TableMappingBase<ColumnMappingBase>>();
            persona.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings18);
            var eFCorePeliculasEntidadesPersonaTableBase = new TableBase("EFCorePeliculas.Entidades.Persona", null, relationalModel);
            var idColumnBase10 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesPersonaTableBase);
            eFCorePeliculasEntidadesPersonaTableBase.Columns.Add("Id", idColumnBase10);
            var nombreColumnBase3 = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(max)", eFCorePeliculasEntidadesPersonaTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesPersonaTableBase.Columns.Add("Nombre", nombreColumnBase3);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.Persona", eFCorePeliculasEntidadesPersonaTableBase);
            var eFCorePeliculasEntidadesPersonaMappingBase = new TableMappingBase<ColumnMappingBase>(persona, eFCorePeliculasEntidadesPersonaTableBase, true);
            eFCorePeliculasEntidadesPersonaTableBase.AddTypeMapping(eFCorePeliculasEntidadesPersonaMappingBase, false);
            defaultTableMappings18.Add(eFCorePeliculasEntidadesPersonaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase10, persona.FindProperty("Id")!, eFCorePeliculasEntidadesPersonaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase3, persona.FindProperty("Nombre")!, eFCorePeliculasEntidadesPersonaMappingBase);

            var tableMappings16 = new List<TableMapping>();
            persona.SetRuntimeAnnotation("Relational:TableMappings", tableMappings16);
            var personasTable = new Table("Personas", null, relationalModel);
            var idColumn9 = new Column("Id", "int", personasTable);
            personasTable.Columns.Add("Id", idColumn9);
            var nombreColumn3 = new Column("Nombre", "nvarchar(max)", personasTable)
            {
                IsNullable = true
            };
            personasTable.Columns.Add("Nombre", nombreColumn3);
            var pK_Personas = new UniqueConstraint("PK_Personas", personasTable, new[] { idColumn9 });
            personasTable.PrimaryKey = pK_Personas;
            var pK_PersonasUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.Persona",
                new[] { "Id" });
            pK_Personas.MappedKeys.Add(pK_PersonasUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PersonasUc).Add(pK_Personas);
            personasTable.UniqueConstraints.Add("PK_Personas", pK_Personas);
            relationalModel.Tables.Add(("Personas", null), personasTable);
            var personasTableMapping = new TableMapping(persona, personasTable, true);
            personasTable.AddTypeMapping(personasTableMapping, false);
            tableMappings16.Add(personasTableMapping);
            RelationalModel.CreateColumnMapping(idColumn9, persona.FindProperty("Id")!, personasTableMapping);
            RelationalModel.CreateColumnMapping(nombreColumn3, persona.FindProperty("Nombre")!, personasTableMapping);

            var producto = FindEntityType("EFCorePeliculas.Entidades.Producto")!;

            var defaultTableMappings19 = new List<TableMappingBase<ColumnMappingBase>>();
            producto.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings19);
            var eFCorePeliculasEntidadesProductoMappingBase1 = new TableMappingBase<ColumnMappingBase>(producto, eFCorePeliculasEntidadesProductoTableBase, true);
            eFCorePeliculasEntidadesProductoTableBase.AddTypeMapping(eFCorePeliculasEntidadesProductoMappingBase1, false);
            defaultTableMappings19.Add(eFCorePeliculasEntidadesProductoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase5, producto.FindProperty("Id")!, eFCorePeliculasEntidadesProductoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase2, producto.FindProperty("Nombre")!, eFCorePeliculasEntidadesProductoMappingBase1);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)precioColumnBase, producto.FindProperty("Precio")!, eFCorePeliculasEntidadesProductoMappingBase1);

            var tableMappings17 = new List<TableMapping>();
            producto.SetRuntimeAnnotation("Relational:TableMappings", tableMappings17);
            var productosTableMapping1 = new TableMapping(producto, productosTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            productosTable.AddTypeMapping(productosTableMapping1, false);
            tableMappings17.Add(productosTableMapping1);
            RelationalModel.CreateColumnMapping(idColumn4, producto.FindProperty("Id")!, productosTableMapping1);
            RelationalModel.CreateColumnMapping(nombreColumn2, producto.FindProperty("Nombre")!, productosTableMapping1);
            RelationalModel.CreateColumnMapping(precioColumn, producto.FindProperty("Precio")!, productosTableMapping1);

            var salaDeCine = FindEntityType("EFCorePeliculas.Entidades.SalaDeCine")!;

            var defaultTableMappings20 = new List<TableMappingBase<ColumnMappingBase>>();
            salaDeCine.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings20);
            var eFCorePeliculasEntidadesSalaDeCineTableBase = new TableBase("EFCorePeliculas.Entidades.SalaDeCine", null, relationalModel);
            var elCineColumnBase = new ColumnBase<ColumnMappingBase>("ElCine", "int", eFCorePeliculasEntidadesSalaDeCineTableBase);
            eFCorePeliculasEntidadesSalaDeCineTableBase.Columns.Add("ElCine", elCineColumnBase);
            var idColumnBase11 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesSalaDeCineTableBase);
            eFCorePeliculasEntidadesSalaDeCineTableBase.Columns.Add("Id", idColumnBase11);
            var monedaColumnBase = new ColumnBase<ColumnMappingBase>("Moneda", "nvarchar(max)", eFCorePeliculasEntidadesSalaDeCineTableBase);
            eFCorePeliculasEntidadesSalaDeCineTableBase.Columns.Add("Moneda", monedaColumnBase);
            var precioColumnBase0 = new ColumnBase<ColumnMappingBase>("Precio", "decimal(9,2)", eFCorePeliculasEntidadesSalaDeCineTableBase);
            eFCorePeliculasEntidadesSalaDeCineTableBase.Columns.Add("Precio", precioColumnBase0);
            var tipoSalaDeCineColumnBase = new ColumnBase<ColumnMappingBase>("TipoSalaDeCine", "nvarchar(max)", eFCorePeliculasEntidadesSalaDeCineTableBase);
            eFCorePeliculasEntidadesSalaDeCineTableBase.Columns.Add("TipoSalaDeCine", tipoSalaDeCineColumnBase);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.SalaDeCine", eFCorePeliculasEntidadesSalaDeCineTableBase);
            var eFCorePeliculasEntidadesSalaDeCineMappingBase = new TableMappingBase<ColumnMappingBase>(salaDeCine, eFCorePeliculasEntidadesSalaDeCineTableBase, true);
            eFCorePeliculasEntidadesSalaDeCineTableBase.AddTypeMapping(eFCorePeliculasEntidadesSalaDeCineMappingBase, false);
            defaultTableMappings20.Add(eFCorePeliculasEntidadesSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase11, salaDeCine.FindProperty("Id")!, eFCorePeliculasEntidadesSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)elCineColumnBase, salaDeCine.FindProperty("ElCine")!, eFCorePeliculasEntidadesSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)monedaColumnBase, salaDeCine.FindProperty("Moneda")!, eFCorePeliculasEntidadesSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)precioColumnBase0, salaDeCine.FindProperty("Precio")!, eFCorePeliculasEntidadesSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tipoSalaDeCineColumnBase, salaDeCine.FindProperty("TipoSalaDeCine")!, eFCorePeliculasEntidadesSalaDeCineMappingBase);

            var tableMappings18 = new List<TableMapping>();
            salaDeCine.SetRuntimeAnnotation("Relational:TableMappings", tableMappings18);
            var salasDeCineTable = new Table("SalasDeCine", null, relationalModel);
            var idColumn10 = new Column("Id", "int", salasDeCineTable);
            salasDeCineTable.Columns.Add("Id", idColumn10);
            var elCineColumn = new Column("ElCine", "int", salasDeCineTable);
            salasDeCineTable.Columns.Add("ElCine", elCineColumn);
            var monedaColumn = new Column("Moneda", "nvarchar(max)", salasDeCineTable);
            salasDeCineTable.Columns.Add("Moneda", monedaColumn);
            var precioColumn0 = new Column("Precio", "decimal(9,2)", salasDeCineTable);
            salasDeCineTable.Columns.Add("Precio", precioColumn0);
            var tipoSalaDeCineColumn = new Column("TipoSalaDeCine", "nvarchar(max)", salasDeCineTable);
            salasDeCineTable.Columns.Add("TipoSalaDeCine", tipoSalaDeCineColumn);
            var pK_SalasDeCine = new UniqueConstraint("PK_SalasDeCine", salasDeCineTable, new[] { idColumn10 });
            salasDeCineTable.PrimaryKey = pK_SalasDeCine;
            var pK_SalasDeCineUc = RelationalModel.GetKey(this,
                "EFCorePeliculas.Entidades.SalaDeCine",
                new[] { "Id" });
            pK_SalasDeCine.MappedKeys.Add(pK_SalasDeCineUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SalasDeCineUc).Add(pK_SalasDeCine);
            salasDeCineTable.UniqueConstraints.Add("PK_SalasDeCine", pK_SalasDeCine);
            var iX_SalasDeCine_ElCine = new TableIndex(
            "IX_SalasDeCine_ElCine", salasDeCineTable, new[] { elCineColumn }, false);
            var iX_SalasDeCine_ElCineIx = RelationalModel.GetIndex(this,
                "EFCorePeliculas.Entidades.SalaDeCine",
                new[] { "ElCine" });
            iX_SalasDeCine_ElCine.MappedIndexes.Add(iX_SalasDeCine_ElCineIx);
            RelationalModel.GetOrCreateTableIndexes(iX_SalasDeCine_ElCineIx).Add(iX_SalasDeCine_ElCine);
            salasDeCineTable.Indexes.Add("IX_SalasDeCine_ElCine", iX_SalasDeCine_ElCine);
            relationalModel.Tables.Add(("SalasDeCine", null), salasDeCineTable);
            var salasDeCineTableMapping = new TableMapping(salaDeCine, salasDeCineTable, true);
            salasDeCineTable.AddTypeMapping(salasDeCineTableMapping, false);
            tableMappings18.Add(salasDeCineTableMapping);
            RelationalModel.CreateColumnMapping(idColumn10, salaDeCine.FindProperty("Id")!, salasDeCineTableMapping);
            RelationalModel.CreateColumnMapping(elCineColumn, salaDeCine.FindProperty("ElCine")!, salasDeCineTableMapping);
            RelationalModel.CreateColumnMapping(monedaColumn, salaDeCine.FindProperty("Moneda")!, salasDeCineTableMapping);
            RelationalModel.CreateColumnMapping(precioColumn0, salaDeCine.FindProperty("Precio")!, salasDeCineTableMapping);
            RelationalModel.CreateColumnMapping(tipoSalaDeCineColumn, salaDeCine.FindProperty("TipoSalaDeCine")!, salasDeCineTableMapping);

            var cineSinUbicacion = FindEntityType("EFCorePeliculas.Entidades.SinLlaves.CineSinUbicacion")!;

            var defaultTableMappings21 = new List<TableMappingBase<ColumnMappingBase>>();
            cineSinUbicacion.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings21);
            var eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase = new TableBase("EFCorePeliculas.Entidades.SinLlaves.CineSinUbicacion", null, relationalModel);
            var idColumnBase12 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase);
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase.Columns.Add("Id", idColumnBase12);
            var nombreColumnBase4 = new ColumnBase<ColumnMappingBase>("Nombre", "nvarchar(max)", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase.Columns.Add("Nombre", nombreColumnBase4);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.SinLlaves.CineSinUbicacion", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase);
            var eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappingBase = new TableMappingBase<ColumnMappingBase>(cineSinUbicacion, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase, true);
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionTableBase.AddTypeMapping(eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappingBase, false);
            defaultTableMappings21.Add(eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase12, cineSinUbicacion.FindProperty("Id")!, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nombreColumnBase4, cineSinUbicacion.FindProperty("Nombre")!, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappingBase);

            var sqlQueryMappings = new List<SqlQueryMapping>();
            cineSinUbicacion.SetRuntimeAnnotation("Relational:SqlQueryMappings", sqlQueryMappings);
            var eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery = new SqlQuery("EFCorePeliculas.Entidades.SinLlaves.CineSinUbicacion.MappedSqlQuery", relationalModel, "SELECT id, nombre FROM Cines");
            var idSqlQueryColumn = new SqlQueryColumn("Id", "int", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery);
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery.Columns.Add("Id", idSqlQueryColumn);
            var nombreSqlQueryColumn = new SqlQueryColumn("Nombre", "nvarchar(max)", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery.Columns.Add("Nombre", nombreSqlQueryColumn);
            relationalModel.Queries.Add("EFCorePeliculas.Entidades.SinLlaves.CineSinUbicacion.MappedSqlQuery", eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery);
            var eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping = new SqlQueryMapping(cineSinUbicacion, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery, true);
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQuery.AddTypeMapping(eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping, false);
            sqlQueryMappings.Add(eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping);
            eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping.IsDefaultSqlQueryMapping = true;
            RelationalModel.CreateSqlQueryColumnMapping(idSqlQueryColumn, cineSinUbicacion.FindProperty("Id")!, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping);
            RelationalModel.CreateSqlQueryColumnMapping(nombreSqlQueryColumn, cineSinUbicacion.FindProperty("Nombre")!, eFCorePeliculasEntidadesSinLlavesCineSinUbicacionMappedSqlQuerySqlQueryMapping);

            var peliculaConConteos = FindEntityType("EFCorePeliculas.Entidades.SinLlaves.PeliculaConConteos")!;

            var defaultTableMappings22 = new List<TableMappingBase<ColumnMappingBase>>();
            peliculaConConteos.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings22);
            var eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase = new TableBase("EFCorePeliculas.Entidades.SinLlaves.PeliculaConConteos", null, relationalModel);
            var cantidadActoresColumnBase = new ColumnBase<ColumnMappingBase>("CantidadActores", "int", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase);
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.Columns.Add("CantidadActores", cantidadActoresColumnBase);
            var cantidadCinesColumnBase = new ColumnBase<ColumnMappingBase>("CantidadCines", "int", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase);
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.Columns.Add("CantidadCines", cantidadCinesColumnBase);
            var cantidadGenerosColumnBase = new ColumnBase<ColumnMappingBase>("CantidadGeneros", "int", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase);
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.Columns.Add("CantidadGeneros", cantidadGenerosColumnBase);
            var idColumnBase13 = new ColumnBase<ColumnMappingBase>("Id", "int", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase);
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.Columns.Add("Id", idColumnBase13);
            var tituloColumnBase0 = new ColumnBase<ColumnMappingBase>("Titulo", "nvarchar(max)", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase)
            {
                IsNullable = true
            };
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.Columns.Add("Titulo", tituloColumnBase0);
            relationalModel.DefaultTables.Add("EFCorePeliculas.Entidades.SinLlaves.PeliculaConConteos", eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase);
            var eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase = new TableMappingBase<ColumnMappingBase>(peliculaConConteos, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase, true);
            eFCorePeliculasEntidadesSinLlavesPeliculaConConteosTableBase.AddTypeMapping(eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase, false);
            defaultTableMappings22.Add(eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cantidadActoresColumnBase, peliculaConConteos.FindProperty("CantidadActores")!, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cantidadCinesColumnBase, peliculaConConteos.FindProperty("CantidadCines")!, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)cantidadGenerosColumnBase, peliculaConConteos.FindProperty("CantidadGeneros")!, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase13, peliculaConConteos.FindProperty("Id")!, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)tituloColumnBase0, peliculaConConteos.FindProperty("Titulo")!, eFCorePeliculasEntidadesSinLlavesPeliculaConConteosMappingBase);

            var viewMappings = new List<ViewMapping>();
            peliculaConConteos.SetRuntimeAnnotation("Relational:ViewMappings", viewMappings);
            var peliculasConConteosView = new View("PeliculasConConteos", null, relationalModel);
            var cantidadActoresViewColumn = new ViewColumn("CantidadActores", "int", peliculasConConteosView);
            peliculasConConteosView.Columns.Add("CantidadActores", cantidadActoresViewColumn);
            var cantidadCinesViewColumn = new ViewColumn("CantidadCines", "int", peliculasConConteosView);
            peliculasConConteosView.Columns.Add("CantidadCines", cantidadCinesViewColumn);
            var cantidadGenerosViewColumn = new ViewColumn("CantidadGeneros", "int", peliculasConConteosView);
            peliculasConConteosView.Columns.Add("CantidadGeneros", cantidadGenerosViewColumn);
            var idViewColumn = new ViewColumn("Id", "int", peliculasConConteosView);
            peliculasConConteosView.Columns.Add("Id", idViewColumn);
            var tituloViewColumn = new ViewColumn("Titulo", "nvarchar(max)", peliculasConConteosView)
            {
                IsNullable = true
            };
            peliculasConConteosView.Columns.Add("Titulo", tituloViewColumn);
            relationalModel.Views.Add(("PeliculasConConteos", null), peliculasConConteosView);
            var peliculasConConteosViewMapping = new ViewMapping(peliculaConConteos, peliculasConConteosView, true);
            peliculasConConteosView.AddTypeMapping(peliculasConConteosViewMapping, false);
            viewMappings.Add(peliculasConConteosViewMapping);
            RelationalModel.CreateViewColumnMapping(cantidadActoresViewColumn, peliculaConConteos.FindProperty("CantidadActores")!, peliculasConConteosViewMapping);
            RelationalModel.CreateViewColumnMapping(cantidadCinesViewColumn, peliculaConConteos.FindProperty("CantidadCines")!, peliculasConConteosViewMapping);
            RelationalModel.CreateViewColumnMapping(cantidadGenerosViewColumn, peliculaConConteos.FindProperty("CantidadGeneros")!, peliculasConConteosViewMapping);
            RelationalModel.CreateViewColumnMapping(idViewColumn, peliculaConConteos.FindProperty("Id")!, peliculasConConteosViewMapping);
            RelationalModel.CreateViewColumnMapping(tituloViewColumn, peliculaConConteos.FindProperty("Titulo")!, peliculasConConteosViewMapping);

            var generoPelicula = FindEntityType("GeneroPelicula")!;

            var defaultTableMappings23 = new List<TableMappingBase<ColumnMappingBase>>();
            generoPelicula.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings23);
            var generoPeliculaTableBase = new TableBase("GeneroPelicula", null, relationalModel);
            var generosIdentificadorColumnBase = new ColumnBase<ColumnMappingBase>("GenerosIdentificador", "int", generoPeliculaTableBase);
            generoPeliculaTableBase.Columns.Add("GenerosIdentificador", generosIdentificadorColumnBase);
            var peliculasIdColumnBase = new ColumnBase<ColumnMappingBase>("PeliculasId", "int", generoPeliculaTableBase);
            generoPeliculaTableBase.Columns.Add("PeliculasId", peliculasIdColumnBase);
            relationalModel.DefaultTables.Add("GeneroPelicula", generoPeliculaTableBase);
            var generoPeliculaMappingBase = new TableMappingBase<ColumnMappingBase>(generoPelicula, generoPeliculaTableBase, true);
            generoPeliculaTableBase.AddTypeMapping(generoPeliculaMappingBase, false);
            defaultTableMappings23.Add(generoPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)generosIdentificadorColumnBase, generoPelicula.FindProperty("GenerosIdentificador")!, generoPeliculaMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peliculasIdColumnBase, generoPelicula.FindProperty("PeliculasId")!, generoPeliculaMappingBase);

            var tableMappings19 = new List<TableMapping>();
            generoPelicula.SetRuntimeAnnotation("Relational:TableMappings", tableMappings19);
            var generoPeliculaTable = new Table("GeneroPelicula", null, relationalModel);
            var generosIdentificadorColumn = new Column("GenerosIdentificador", "int", generoPeliculaTable);
            generoPeliculaTable.Columns.Add("GenerosIdentificador", generosIdentificadorColumn);
            var peliculasIdColumn = new Column("PeliculasId", "int", generoPeliculaTable);
            generoPeliculaTable.Columns.Add("PeliculasId", peliculasIdColumn);
            var pK_GeneroPelicula = new UniqueConstraint("PK_GeneroPelicula", generoPeliculaTable, new[] { generosIdentificadorColumn, peliculasIdColumn });
            generoPeliculaTable.PrimaryKey = pK_GeneroPelicula;
            var pK_GeneroPeliculaUc = RelationalModel.GetKey(this,
                "GeneroPelicula",
                new[] { "GenerosIdentificador", "PeliculasId" });
            pK_GeneroPelicula.MappedKeys.Add(pK_GeneroPeliculaUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_GeneroPeliculaUc).Add(pK_GeneroPelicula);
            generoPeliculaTable.UniqueConstraints.Add("PK_GeneroPelicula", pK_GeneroPelicula);
            var iX_GeneroPelicula_PeliculasId = new TableIndex(
            "IX_GeneroPelicula_PeliculasId", generoPeliculaTable, new[] { peliculasIdColumn }, false);
            var iX_GeneroPelicula_PeliculasIdIx = RelationalModel.GetIndex(this,
                "GeneroPelicula",
                new[] { "PeliculasId" });
            iX_GeneroPelicula_PeliculasId.MappedIndexes.Add(iX_GeneroPelicula_PeliculasIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_GeneroPelicula_PeliculasIdIx).Add(iX_GeneroPelicula_PeliculasId);
            generoPeliculaTable.Indexes.Add("IX_GeneroPelicula_PeliculasId", iX_GeneroPelicula_PeliculasId);
            relationalModel.Tables.Add(("GeneroPelicula", null), generoPeliculaTable);
            var generoPeliculaTableMapping = new TableMapping(generoPelicula, generoPeliculaTable, true);
            generoPeliculaTable.AddTypeMapping(generoPeliculaTableMapping, false);
            tableMappings19.Add(generoPeliculaTableMapping);
            RelationalModel.CreateColumnMapping(generosIdentificadorColumn, generoPelicula.FindProperty("GenerosIdentificador")!, generoPeliculaTableMapping);
            RelationalModel.CreateColumnMapping(peliculasIdColumn, generoPelicula.FindProperty("PeliculasId")!, generoPeliculaTableMapping);

            var peliculaSalaDeCine = FindEntityType("PeliculaSalaDeCine")!;

            var defaultTableMappings24 = new List<TableMappingBase<ColumnMappingBase>>();
            peliculaSalaDeCine.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings24);
            var peliculaSalaDeCineTableBase = new TableBase("PeliculaSalaDeCine", null, relationalModel);
            var peliculasIdColumnBase0 = new ColumnBase<ColumnMappingBase>("PeliculasId", "int", peliculaSalaDeCineTableBase);
            peliculaSalaDeCineTableBase.Columns.Add("PeliculasId", peliculasIdColumnBase0);
            var salasDeCineIdColumnBase = new ColumnBase<ColumnMappingBase>("SalasDeCineId", "int", peliculaSalaDeCineTableBase);
            peliculaSalaDeCineTableBase.Columns.Add("SalasDeCineId", salasDeCineIdColumnBase);
            relationalModel.DefaultTables.Add("PeliculaSalaDeCine", peliculaSalaDeCineTableBase);
            var peliculaSalaDeCineMappingBase = new TableMappingBase<ColumnMappingBase>(peliculaSalaDeCine, peliculaSalaDeCineTableBase, true);
            peliculaSalaDeCineTableBase.AddTypeMapping(peliculaSalaDeCineMappingBase, false);
            defaultTableMappings24.Add(peliculaSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)peliculasIdColumnBase0, peliculaSalaDeCine.FindProperty("PeliculasId")!, peliculaSalaDeCineMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)salasDeCineIdColumnBase, peliculaSalaDeCine.FindProperty("SalasDeCineId")!, peliculaSalaDeCineMappingBase);

            var tableMappings20 = new List<TableMapping>();
            peliculaSalaDeCine.SetRuntimeAnnotation("Relational:TableMappings", tableMappings20);
            var peliculaSalaDeCineTable = new Table("PeliculaSalaDeCine", null, relationalModel);
            var peliculasIdColumn0 = new Column("PeliculasId", "int", peliculaSalaDeCineTable);
            peliculaSalaDeCineTable.Columns.Add("PeliculasId", peliculasIdColumn0);
            var salasDeCineIdColumn = new Column("SalasDeCineId", "int", peliculaSalaDeCineTable);
            peliculaSalaDeCineTable.Columns.Add("SalasDeCineId", salasDeCineIdColumn);
            var pK_PeliculaSalaDeCine = new UniqueConstraint("PK_PeliculaSalaDeCine", peliculaSalaDeCineTable, new[] { peliculasIdColumn0, salasDeCineIdColumn });
            peliculaSalaDeCineTable.PrimaryKey = pK_PeliculaSalaDeCine;
            var pK_PeliculaSalaDeCineUc = RelationalModel.GetKey(this,
                "PeliculaSalaDeCine",
                new[] { "PeliculasId", "SalasDeCineId" });
            pK_PeliculaSalaDeCine.MappedKeys.Add(pK_PeliculaSalaDeCineUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_PeliculaSalaDeCineUc).Add(pK_PeliculaSalaDeCine);
            peliculaSalaDeCineTable.UniqueConstraints.Add("PK_PeliculaSalaDeCine", pK_PeliculaSalaDeCine);
            var iX_PeliculaSalaDeCine_SalasDeCineId = new TableIndex(
            "IX_PeliculaSalaDeCine_SalasDeCineId", peliculaSalaDeCineTable, new[] { salasDeCineIdColumn }, false);
            var iX_PeliculaSalaDeCine_SalasDeCineIdIx = RelationalModel.GetIndex(this,
                "PeliculaSalaDeCine",
                new[] { "SalasDeCineId" });
            iX_PeliculaSalaDeCine_SalasDeCineId.MappedIndexes.Add(iX_PeliculaSalaDeCine_SalasDeCineIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_PeliculaSalaDeCine_SalasDeCineIdIx).Add(iX_PeliculaSalaDeCine_SalasDeCineId);
            peliculaSalaDeCineTable.Indexes.Add("IX_PeliculaSalaDeCine_SalasDeCineId", iX_PeliculaSalaDeCine_SalasDeCineId);
            relationalModel.Tables.Add(("PeliculaSalaDeCine", null), peliculaSalaDeCineTable);
            var peliculaSalaDeCineTableMapping = new TableMapping(peliculaSalaDeCine, peliculaSalaDeCineTable, true);
            peliculaSalaDeCineTable.AddTypeMapping(peliculaSalaDeCineTableMapping, false);
            tableMappings20.Add(peliculaSalaDeCineTableMapping);
            RelationalModel.CreateColumnMapping(peliculasIdColumn0, peliculaSalaDeCine.FindProperty("PeliculasId")!, peliculaSalaDeCineTableMapping);
            RelationalModel.CreateColumnMapping(salasDeCineIdColumn, peliculaSalaDeCine.FindProperty("SalasDeCineId")!, peliculaSalaDeCineTableMapping);
            var fK_CinesOfertas_Cines_CineId = new ForeignKeyConstraint(
                "FK_CinesOfertas_Cines_CineId", cinesOfertasTable, cinesTable,
                new[] { cineIdColumn },
                cinesTable.FindUniqueConstraint("PK_Cines")!, ReferentialAction.NoAction);
            var fK_CinesOfertas_Cines_CineIdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.CineOferta",
                new[] { "CineId" },
                "EFCorePeliculas.Entidades.Cine",
                new[] { "Id" });
            fK_CinesOfertas_Cines_CineId.MappedForeignKeys.Add(fK_CinesOfertas_Cines_CineIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_CinesOfertas_Cines_CineIdFk).Add(fK_CinesOfertas_Cines_CineId);
            cinesOfertasTable.ForeignKeyConstraints.Add(fK_CinesOfertas_Cines_CineId);
            cinesTable.ReferencingForeignKeyConstraints.Add(fK_CinesOfertas_Cines_CineId);
            var fK_GeneroPelicula_Generos_GenerosIdentificador = new ForeignKeyConstraint(
                "FK_GeneroPelicula_Generos_GenerosIdentificador", generoPeliculaTable, generosTable,
                new[] { generosIdentificadorColumn },
                generosTable.FindUniqueConstraint("PK_Generos")!, ReferentialAction.Cascade);
            var fK_GeneroPelicula_Generos_GenerosIdentificadorFk = RelationalModel.GetForeignKey(this,
                "GeneroPelicula",
                new[] { "GenerosIdentificador" },
                "EFCorePeliculas.Entidades.Genero",
                new[] { "Identificador" });
            fK_GeneroPelicula_Generos_GenerosIdentificador.MappedForeignKeys.Add(fK_GeneroPelicula_Generos_GenerosIdentificadorFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GeneroPelicula_Generos_GenerosIdentificadorFk).Add(fK_GeneroPelicula_Generos_GenerosIdentificador);
            generoPeliculaTable.ForeignKeyConstraints.Add(fK_GeneroPelicula_Generos_GenerosIdentificador);
            generosTable.ReferencingForeignKeyConstraints.Add(fK_GeneroPelicula_Generos_GenerosIdentificador);
            var fK_GeneroPelicula_Peliculas_PeliculasId = new ForeignKeyConstraint(
                "FK_GeneroPelicula_Peliculas_PeliculasId", generoPeliculaTable, peliculasTable,
                new[] { peliculasIdColumn },
                peliculasTable.FindUniqueConstraint("PK_Peliculas")!, ReferentialAction.Cascade);
            var fK_GeneroPelicula_Peliculas_PeliculasIdFk = RelationalModel.GetForeignKey(this,
                "GeneroPelicula",
                new[] { "PeliculasId" },
                "EFCorePeliculas.Entidades.Pelicula",
                new[] { "Id" });
            fK_GeneroPelicula_Peliculas_PeliculasId.MappedForeignKeys.Add(fK_GeneroPelicula_Peliculas_PeliculasIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_GeneroPelicula_Peliculas_PeliculasIdFk).Add(fK_GeneroPelicula_Peliculas_PeliculasId);
            generoPeliculaTable.ForeignKeyConstraints.Add(fK_GeneroPelicula_Peliculas_PeliculasId);
            peliculasTable.ReferencingForeignKeyConstraints.Add(fK_GeneroPelicula_Peliculas_PeliculasId);
            var fK_Mensajes_Personas_EmisorId = new ForeignKeyConstraint(
                "FK_Mensajes_Personas_EmisorId", mensajesTable, personasTable,
                new[] { emisorIdColumn },
                personasTable.FindUniqueConstraint("PK_Personas")!, ReferentialAction.Cascade);
            var fK_Mensajes_Personas_EmisorIdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Mensaje",
                new[] { "EmisorId" },
                "EFCorePeliculas.Entidades.Persona",
                new[] { "Id" });
            fK_Mensajes_Personas_EmisorId.MappedForeignKeys.Add(fK_Mensajes_Personas_EmisorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Mensajes_Personas_EmisorIdFk).Add(fK_Mensajes_Personas_EmisorId);
            mensajesTable.ForeignKeyConstraints.Add(fK_Mensajes_Personas_EmisorId);
            personasTable.ReferencingForeignKeyConstraints.Add(fK_Mensajes_Personas_EmisorId);
            var fK_Mensajes_Personas_ReceptorId = new ForeignKeyConstraint(
                "FK_Mensajes_Personas_ReceptorId", mensajesTable, personasTable,
                new[] { receptorIdColumn },
                personasTable.FindUniqueConstraint("PK_Personas")!, ReferentialAction.Cascade);
            var fK_Mensajes_Personas_ReceptorIdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Mensaje",
                new[] { "ReceptorId" },
                "EFCorePeliculas.Entidades.Persona",
                new[] { "Id" });
            fK_Mensajes_Personas_ReceptorId.MappedForeignKeys.Add(fK_Mensajes_Personas_ReceptorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Mensajes_Personas_ReceptorIdFk).Add(fK_Mensajes_Personas_ReceptorId);
            mensajesTable.ForeignKeyConstraints.Add(fK_Mensajes_Personas_ReceptorId);
            personasTable.ReferencingForeignKeyConstraints.Add(fK_Mensajes_Personas_ReceptorId);
            var fK_Merchandising_Productos_Id = new ForeignKeyConstraint(
                "FK_Merchandising_Productos_Id", merchandisingTable, productosTable,
                new[] { idColumn5 },
                productosTable.FindUniqueConstraint("PK_Productos")!, ReferentialAction.Cascade);
            var fK_Merchandising_Productos_IdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.Merchandising",
                new[] { "Id" },
                "EFCorePeliculas.Entidades.Producto",
                new[] { "Id" });
            fK_Merchandising_Productos_Id.MappedForeignKeys.Add(fK_Merchandising_Productos_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Merchandising_Productos_IdFk).Add(fK_Merchandising_Productos_Id);
            merchandisingTable.ForeignKeyConstraints.Add(fK_Merchandising_Productos_Id);
            productosTable.ReferencingForeignKeyConstraints.Add(fK_Merchandising_Productos_Id);
            var fK_PeliculasActores_Actores_ActorId = new ForeignKeyConstraint(
                "FK_PeliculasActores_Actores_ActorId", peliculasActoresTable, actoresTable,
                new[] { actorIdColumn },
                actoresTable.FindUniqueConstraint("PK_Actores")!, ReferentialAction.Cascade);
            var fK_PeliculasActores_Actores_ActorIdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.PeliculaActor",
                new[] { "ActorId" },
                "EFCorePeliculas.Entidades.Actor",
                new[] { "Id" });
            fK_PeliculasActores_Actores_ActorId.MappedForeignKeys.Add(fK_PeliculasActores_Actores_ActorIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PeliculasActores_Actores_ActorIdFk).Add(fK_PeliculasActores_Actores_ActorId);
            peliculasActoresTable.ForeignKeyConstraints.Add(fK_PeliculasActores_Actores_ActorId);
            actoresTable.ReferencingForeignKeyConstraints.Add(fK_PeliculasActores_Actores_ActorId);
            var fK_PeliculasActores_Peliculas_PeliculaId = new ForeignKeyConstraint(
                "FK_PeliculasActores_Peliculas_PeliculaId", peliculasActoresTable, peliculasTable,
                new[] { peliculaIdColumn },
                peliculasTable.FindUniqueConstraint("PK_Peliculas")!, ReferentialAction.Cascade);
            var fK_PeliculasActores_Peliculas_PeliculaIdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.PeliculaActor",
                new[] { "PeliculaId" },
                "EFCorePeliculas.Entidades.Pelicula",
                new[] { "Id" });
            fK_PeliculasActores_Peliculas_PeliculaId.MappedForeignKeys.Add(fK_PeliculasActores_Peliculas_PeliculaIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PeliculasActores_Peliculas_PeliculaIdFk).Add(fK_PeliculasActores_Peliculas_PeliculaId);
            peliculasActoresTable.ForeignKeyConstraints.Add(fK_PeliculasActores_Peliculas_PeliculaId);
            peliculasTable.ReferencingForeignKeyConstraints.Add(fK_PeliculasActores_Peliculas_PeliculaId);
            var fK_PeliculaSalaDeCine_Peliculas_PeliculasId = new ForeignKeyConstraint(
                "FK_PeliculaSalaDeCine_Peliculas_PeliculasId", peliculaSalaDeCineTable, peliculasTable,
                new[] { peliculasIdColumn0 },
                peliculasTable.FindUniqueConstraint("PK_Peliculas")!, ReferentialAction.Cascade);
            var fK_PeliculaSalaDeCine_Peliculas_PeliculasIdFk = RelationalModel.GetForeignKey(this,
                "PeliculaSalaDeCine",
                new[] { "PeliculasId" },
                "EFCorePeliculas.Entidades.Pelicula",
                new[] { "Id" });
            fK_PeliculaSalaDeCine_Peliculas_PeliculasId.MappedForeignKeys.Add(fK_PeliculaSalaDeCine_Peliculas_PeliculasIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PeliculaSalaDeCine_Peliculas_PeliculasIdFk).Add(fK_PeliculaSalaDeCine_Peliculas_PeliculasId);
            peliculaSalaDeCineTable.ForeignKeyConstraints.Add(fK_PeliculaSalaDeCine_Peliculas_PeliculasId);
            peliculasTable.ReferencingForeignKeyConstraints.Add(fK_PeliculaSalaDeCine_Peliculas_PeliculasId);
            var fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId = new ForeignKeyConstraint(
                "FK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId", peliculaSalaDeCineTable, salasDeCineTable,
                new[] { salasDeCineIdColumn },
                salasDeCineTable.FindUniqueConstraint("PK_SalasDeCine")!, ReferentialAction.Cascade);
            var fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineIdFk = RelationalModel.GetForeignKey(this,
                "PeliculaSalaDeCine",
                new[] { "SalasDeCineId" },
                "EFCorePeliculas.Entidades.SalaDeCine",
                new[] { "Id" });
            fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId.MappedForeignKeys.Add(fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineIdFk).Add(fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId);
            peliculaSalaDeCineTable.ForeignKeyConstraints.Add(fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId);
            salasDeCineTable.ReferencingForeignKeyConstraints.Add(fK_PeliculaSalaDeCine_SalasDeCine_SalasDeCineId);
            var fK_PeliculasAlquilables_Productos_Id = new ForeignKeyConstraint(
                "FK_PeliculasAlquilables_Productos_Id", peliculasAlquilablesTable, productosTable,
                new[] { idColumn8 },
                productosTable.FindUniqueConstraint("PK_Productos")!, ReferentialAction.Cascade);
            var fK_PeliculasAlquilables_Productos_IdFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.PeliculaAlquilable",
                new[] { "Id" },
                "EFCorePeliculas.Entidades.Producto",
                new[] { "Id" });
            fK_PeliculasAlquilables_Productos_Id.MappedForeignKeys.Add(fK_PeliculasAlquilables_Productos_IdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_PeliculasAlquilables_Productos_IdFk).Add(fK_PeliculasAlquilables_Productos_Id);
            peliculasAlquilablesTable.ForeignKeyConstraints.Add(fK_PeliculasAlquilables_Productos_Id);
            productosTable.ReferencingForeignKeyConstraints.Add(fK_PeliculasAlquilables_Productos_Id);
            var fK_SalasDeCine_Cines_ElCine = new ForeignKeyConstraint(
                "FK_SalasDeCine_Cines_ElCine", salasDeCineTable, cinesTable,
                new[] { elCineColumn },
                cinesTable.FindUniqueConstraint("PK_Cines")!, ReferentialAction.Restrict);
            var fK_SalasDeCine_Cines_ElCineFk = RelationalModel.GetForeignKey(this,
                "EFCorePeliculas.Entidades.SalaDeCine",
                new[] { "ElCine" },
                "EFCorePeliculas.Entidades.Cine",
                new[] { "Id" });
            fK_SalasDeCine_Cines_ElCine.MappedForeignKeys.Add(fK_SalasDeCine_Cines_ElCineFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_SalasDeCine_Cines_ElCineFk).Add(fK_SalasDeCine_Cines_ElCine);
            salasDeCineTable.ForeignKeyConstraints.Add(fK_SalasDeCine_Cines_ElCine);
            cinesTable.ReferencingForeignKeyConstraints.Add(fK_SalasDeCine_Cines_ElCine);
            return relationalModel.MakeReadOnly();
        }
    }
}
